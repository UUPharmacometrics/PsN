#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use common_options;
# More PsN dependencies included with require further down

my ($opt_help,
    $opt_long_help,
    $opt_missing_data_token,
	$opt_global,
    $opt_columns,
    $opt_ignore_columns,
	$opt_ignoresign);

my $opts = { "h|?"                => \$opt_help,
	     "help"               => \$opt_long_help,
	     "missing_data_token:f"          => \$opt_missing_data_token,
	     "global!"          => \$opt_global,
	     "columns:s"          => \$opt_columns,
	     "ignore_columns:s"   => \$opt_ignore_columns,
	     "ignoresign:s"   => \$opt_ignoresign,
};

#only for help text
my %required_options = ();
my %optional_options = ("h|?"                => undef,
	     "help"               => undef,
	     "missing_data_token:f"          => undef,
	     "global!"          => undef,
	     "columns:s"          => undef,
	     "ignore_columns:s"   => undef,
	     "ignoresign:s"   => undef,
);


my $res = GetOptions( %{$opts} );

exit unless $res;

if ( scalar( @ARGV ) < 1 and !($opt_help or $opt_long_help) ){
  print "A data file must be specified. Use 'data_stats -h' for help.\n";
  exit;
}

my %help_text;
$help_text{Pre_help_message} = <<'EOF';  
	Basic statistics on a data file
EOF

$help_text{-help} = <<'EOF';      
	-help

	Print this, longer, help message.
EOF

$help_text{-h} = <<'EOF';      
	-h

	Print a list of options.
EOF

$help_text{Description} = <<'EOF';

	data_stats calculates and prints simple statistics for data files. Simple
	statistics are max, min, mean, median, range and standard deviation for
	each column.
EOF

$help_text{Examples} = <<'EOF';

	Calculate statistics for all columns in file.dta data_stats file.dta
	Calculate statistics for all columns except WGT and AGE.
	data_stats --ignore_columns=WGT,AGE file.dta

	Calculate statistics for WGT and AGE only data_stats --columns=WGT,AGE
	file.dta
EOF

$help_text{Options} = <<'EOF';
	A data file is required as argument.

	The following options are valid:
EOF

$help_text{-global} = <<'EOF';      
	-global

	Default not set. If set, compute mean, median and sd treating all records
	equally, which means individuals with many records will have more influence.
	If not set, compute those metrics by first computing one value per individual,
	and then computing over individuals, meaning that all individuals will have
	equal influence.
EOF

$help_text{-columns} = <<'EOF';      
	-columns='strings'

	By default data_stats prints statistics for all columns of the data set. But
	if you give a comma separated list of column headers or column numbers with
	the -columns option, then data_stats will print statistics for those columns
	only.
EOF

$help_text{-ignore_columns} = <<'EOF';      
	-ignore_columns='strings'

	ignore_columns work the oposite way of -columns, it lets you select column
	headers or column numbers for which data_stats should not print statistcs.
	It also takes a comma separated list.
EOF

$help_text{-ignoresign} = <<'EOF';      
	-ignoresign='string'

	Default is '@', i.e. ignore letters A-Z a-z. If the data file contains a header
	then that lines needs to be ignored by setting ignoresign.
EOF

$help_text{-missing_data_token} = <<'EOF';      
	-missing_data_token=number

Default -99. Number denoting missing data.
EOF

$help_text{Post_help_message} = '';

	my $help;
my $indentation = '    ';
if($opt_help or $opt_long_help) {
	if( scalar( @ARGV ) > 0 ){
		foreach my $option ( @ARGV ){
			$option =~ s/^-//;
			$help .= common_options::format_help_text(\%help_text,$indentation,'-'.$option);
          } 
		
#		$help =~ s/<\?.*\?>//g;
#		$help =~ s/<[^>]*>//g;
		print $help;
		exit;
	}

	$help .= "\ndata_stats\n";
	$help .= common_options::format_help_text(\%help_text,$indentation,'Pre_help_message');

	if( $opt_long_help ){

		  $help .=common_options::format_help_text(\%help_text,$indentation,'Description');
		  $help .=common_options::format_help_text(\%help_text,$indentation,'Examples');
		  $help .=common_options::format_help_text(\%help_text,$indentation,'Options');

          my @loop_array = sort(keys %required_options,keys %optional_options);

          foreach my $option( @loop_array ){
              $option =~ s/[^\w]*$|:.*//;
			  $help .= common_options::format_help_text(\%help_text,$indentation,'-'.$option);
          }

          $help .= common_options::format_help_text(\%help_text,$indentation,'Post_help_message');

	} else { 

          my @loop_array = sort(keys %required_options);

          foreach my $option( @loop_array ){
			  $option =~ s/:s/='string'/;
			  $option =~ s/:f/='number'/;
			  $option =~ s/:i/='integer'/;
			  $help .= $indentation.'  --'.$option."\n";
          }
          @loop_array = sort(keys %optional_options);

          foreach my $option( @loop_array ){
			  $option =~ s/:s/='string'/;
			  $option =~ s/:f/='number'/;
			  $option =~ s/:i/='integer'/;
			  $help .= $indentation.'[ --'.$option." ]\n";
          }

          $help .= "\n$indentation"."Options enclosed by [ ] are optional.\n"; 
          $help .= "$indentation"."Exclamation mark, !, after the option name means option can be disabled\n".
			  "$indentation"."using '-no-option', for example -no-handle_crashes.\n"; 
          $help .= "$indentation"."Use 'data_stats -help' for a longer description.\n"; 
          $help .= common_options::format_help_text(\%help_text,$indentation,'Post_help_message');
      } 

#      $help =~ s/<\?.*\?>//g;
#      $help =~ s/<[^>]*>//g;
      print $help;

      exit;
}




my $ignoresign='@';
if( $opt_ignoresign ){
	$ignoresign = $opt_ignoresign;
}
my $missing=-99;
if( defined $opt_missing_data_token ){
	$missing = $opt_missing_data_token;
}
my $global=0;
$global = 1 if ($opt_global);

require data;

my $datafile = $ARGV[0];
my $dataobj = data -> new (filename => $datafile, 
						   ignoresign => $ignoresign, 
						   parse_header => 1,
						   missing_data_token => $missing);

my %ignore_columns;

if( $opt_ignore_columns ){
  foreach my $ign ( split( /,/ , $opt_ignore_columns ) ){
    $ignore_columns{$ign} = 1;
  }
}

my @columns;

if( $opt_columns ) {
  @columns = split( /,/, $opt_columns)
} else {
  @columns = @{$dataobj -> header};
}

my $first = 1;
foreach my $function ( ' 'x8, 'Min', 'Max', 'Mean', 'Median', 'Range', 'SD', ){
	printf "%-8s", $function;
	foreach my $head ( @columns ){
		unless( $ignore_columns{$head} ){
			if( $first ){
				printf "%-8s", $head;
			} else {
				my $function = lc( $function );
				if ($global and $function =~/(mean|median|sd)/){
					if( $head =~ /[^\d]/ ){
						printf "%-8d", $dataobj -> $function( column_head => $head, "global_$function" => $global );
					} else {
						printf "%-8d", $dataobj -> $function( column => $head , "global_$function" => $global);
					}
				}else{
					if( $head =~ /[^\d]/ ){
						printf "%-8d", $dataobj -> $function( column_head => $head );
					} else {
						printf "%-8d", $dataobj -> $function( column => $head );
					}
				}
			}
		}
	}
	$first = 0;
	print "\n";
}


print "\n";
