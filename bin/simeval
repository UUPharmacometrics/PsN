#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use common_options;
use Cwd;
use OSspecific;
use ui;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

my %options;
## Declare the options

my %required_options = ();
my %optional_options = ( 'samples:i' => undef,
						 'estimate_input!' => undef,
						 'lst_file:s' => undef,
						 'idv:s' => undef,
                         'dv:s' => undef,
						 'extra_variables:s' => undef,
						 'n_simulation_models:i' => undef,
						 'reminimize!' => undef,
						 'gls_data_file!' => undef);

my $res = GetOptions( \%options,
		      @common_options::get_opt_strings,
		      keys(%required_options),
		      keys(%optional_options) );
exit unless $res;


my %help_text;

	$help_text{Pre_help_message} = <<'EOF';
	Simulation evaluation model diagnostics
EOF

	$help_text{Description} = <<'EOF';      
	The simeval program computes normalised prediction distribution errors for
	the empirical Bayes estimates, similar to the procedure described in Comets, 
	Computing normalised prediction distribution errors to evaluate nonlinear 
	mixed-effect models: The npde add-on package for R, J CMPB 90(2008) 154â€“166.

EOF
	$help_text{Examples} = <<'EOF';      
	simeval run2.mod
EOF

	$help_text{Options} = <<'EOF';      
	A model file is required on the command line.
	
	Note: If any IDs in the data set do not have any observation records, then 
	those IDs must be IGNOREd in $DATA, otherwise simeval will not produce all 
	output.

   The following options are valid:
EOF

$help_text{-h} = <<'EOF';
      -h | -?
      
      With -h or -? simeval will print a list of options and exit.
EOF
      
$help_text{-help} = <<'EOF';      
      -help
      
      With -help simeval will print this, longer, help message.
EOF

	$help_text{-dv} = <<'EOF';
      -dv=VARIABLE

      Default is DV. Name of dependent variable for DV vs PRED plot.
EOF

	$help_text{-estimate_input} = <<'EOF';
      -estimate_input

      Default set. By default, PsN will rerun the input model to get parameter 
      estimates unless an output file is found or option -lst_file is set. But 
      if option -estimate_input is unset with -no-estimate_input and no lst-file 
      is found then the parameter estimates set in the input model will be used
      for simulations.
EOF

	$help_text{-extra_variables} = <<'EOF';
      -extra_variables=comma-separated list

    Default empty. A comma-separated list of extra variables to add to $TABLE of 
	simulation models.
EOF

	$help_text{-gls_data_file} = <<'EOF';
      -gls_data_file=filename

      Default gls_data.dta. A file with input data for the gls tool is always 
      generated. This option changes the name of that file. After this file is 
      created, the gls program can be run with option -gls_model and -ind_shrinkage 
      with minimum runtime, see gls_userguide.pdf
EOF

	$help_text{-idv} = <<'EOF';
      -idv=variable

      Default set variable TIME. Independent variable for DV vs idv plot.
EOF

	$help_text{-lst_file} = <<'EOF';
      -lst_file=filename

      Default not set. By default PsN will, before copying the input model to the 
      simulation models, look for an output file with final estimates for the input 
      model and if found update the initial estimates in the simulation models. If 
      option -lst_file is set Psn will instead use the final estimates in the given 
      file. If option is not set and no output file is found PsN will not update the 
      estimates but instead rerun the input model, if option -estimate_input is set.
EOF

	$help_text{-n_simulation_models} = <<'EOF';
      -n_simulation_models=N

      Default equal to the number of threads. By setting this option to a number N 
	  greater than 1, the 'samples' simulations will be split equally between N 
	  model files, which can be run in parallel.
EOF

	$help_text{-reminimize} = <<'EOF';
      -reminimize

      Default not set. By default, simulated datasets will be run with MAXEVAL=0 
      (or equivalent for non-classical estimation methods). If option -reminimize 
      is set then $EST will be the same as in the input model. We advise the user 
	  to use together with MAXEVAL=0 the MCETA option in order to avoid local 
	  minima at the individual level.
EOF

	$help_text{-samples} = <<'EOF';
      -samples=N

      Default is 300. The number of simulations and reestimations to perform.
EOF

	$help_text{Post_help_message} = <<'EOF';
    Also see 'psn_options -h' for a description of common PsN options.
EOF

common_options::online_help( 'simeval', \%options, \%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'simeval' ); #get defaults, #calls set_globals etc, initiates random sequence

## Check that we do have a model file
if ( scalar(@ARGV) < 1 ) {
  print "An input model file must be specified. Use 'simeval -h' for help.\n";
  exit;
}

if( scalar(@ARGV) > 1 ){
  print "simeval can only handle one modelfile, you listed: ",join(',',@ARGV),". Use 'simeval -h' for help.\n";die;
  exit;
}



require model;
require input_checking;

my $eval_string = common_options::model_parameters(\%options);

my $model = model -> new ( eval( $eval_string ),
			   filename                    => $ARGV[0],
			   ignore_missing_output_files => 1);

input_checking::check_options(tool => 'simeval', options => \%options, model => $model);

require tool::simeval;

my $simeval = tool::simeval->new( eval( $common_options::parameters ),
								  lst_file => $options{'lst_file'},
								  estimate_input => $options{'estimate_input'},
								  reminimize => $options{'reminimize'},
								  n_simulation_models => $options{'n_simulation_models'},
								  gls_data_file => $options{'gls_data_file'},
								  models	     => [ $model ],
								  idv => $options{'idv'},
								  extra_variables => $options{'extra_variables'},
								  samples            => $options{'samples'} );

$simeval-> print_options (cmd_line => $cmd_line,
						   toolname => 'simeval',
						   local_options => [keys %optional_options],
						   common_options => \@common_options::tool_options);

   
$simeval -> run;
require tool::npc;

my $len = scalar(@{$simeval->all_table_files});
my @array = ();
for (my $i=1; $i< $len; $i++){
	push(@array,$simeval->all_table_files->[$i]);
}
my $vpc = tool::npc->new( eval( $common_options::parameters ),
						  models	     => [ $model ],
						  directory => $simeval->directory.'/vpc_dv_vs_pred',
						  samples => $options{'samples'},
						  orig_table => $simeval->all_table_files->[0],
						  sim_table => \@array,
						  idv => 'PRED',
                          dv => $options{'dv'},
						  auto_bin_mode => 'auto_equal_count',
						  top_tool => 1,
						  levels             => [],
						  is_vpc             => 1,
						  directory_name_prefix => 'vpc',
						  zip => 0,
						  rplots => -1);

$vpc-> print_options (cmd_line => 'vpc internal',
					  toolname => 'vpc',
					  local_options => ['samples','orig_table','idv','dv'],
					  common_options => \@common_options::tool_options);
$vpc->run;
$vpc->print_results;

push(@{$simeval->vpctab_filenames},$vpc->vpctab_filename);
push(@{$simeval->vpc_result_files},$vpc->directory.$vpc->results_file);
push(@{$simeval->vpc_names},'DV vs PRED');

if (not $simeval->skipped_residuals) {
    $vpc = tool::npc->new( eval( $common_options::parameters ),
        models	     => [ $model ],
        directory => $simeval->directory.'/vpc_cwres_vs_idv',
        samples => $options{'samples'},
        orig_table => $simeval->all_table_files->[0],
        sim_table => \@array,
        idv => $simeval->idv,
        dv => 'CWRES',
        top_tool => 1,
        auto_bin_mode => 'auto_equal_count',
        is_vpc             => 1,
        directory_name_prefix => 'vpc',
        levels             => [],
        zip => 0,
        rplots => -1);

    $vpc-> print_options (cmd_line => 'vpc internal',
        toolname => 'vpc',
        local_options => ['samples','orig_table','idv','dv'],
        common_options => \@common_options::tool_options);
    $vpc->run;
    $vpc->print_results;

    push(@{$simeval->vpctab_filenames},$vpc->vpctab_filename);
    push(@{$simeval->vpc_result_files},$vpc->directory.$vpc->results_file);
    push(@{$simeval->vpc_names},'CWRES vs '.$simeval->idv);
}
$simeval->print_results; #for rplots. this creates r plots code, does zipping after

ui -> print( category => 'simeval',
	     message => "\nsimeval done\n" );
