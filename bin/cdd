#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use common_options;
use ui;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

my %options;
## Declare the options

my %required_options = ( 'case_column:s'        => 'column_name|column_number');
my %optional_options = ( "bins:i"               => '',
						 "update_inits!"=>'',
						 "xv!"                  => '',
						 "selection_method:s"   => '\'random\'|\'consecutive\'',
						 "outside_n_sd_check:f" => '',
                         "etas!",
                     );

my $res = GetOptions( \%options,
		      @common_options::get_opt_strings,
		      keys(%required_options),
		      keys(%optional_options) );
exit unless $res;

my %help_text;

$help_text{Pre_help_message} = <<'EOF';  
	Case Deletion Diagnostics
EOF

$help_text{Description} = <<'EOF';

	The Case Deletion Diagnostics tool is run using the command from the
	command line with a few mandatory arguments. CDD is run as a diagnostic
	after a model is regarded finished or at least mature enough to run
	validation tool on. The Case Deletions Diagnostics (CDD) algorithm is a
	tool primarily used to identify influential components of the dataset,
	usually individuals. The CDD works by identifying groups in the data set
	and creating one new data set for each member of the group, where that
	member has been removed. The model is run once with each new data set.
	The PsN implementation of the CDD can take any column as base for the
	grouping and all rows with the same value in that column will be
	considered a group as long as no individual contain multiple values in
	that column. One should take care that the grouping creates sensible
	individual records. PsN will renumber the ID column so that two individuals
	with the same ID will not end up next to each other. 
EOF

$help_text{Examples} = <<'EOF';
	cdd run89.mod -case_column=10

	This will perform a Case Deletion Diagnostic on the model specified in
	run89.mod based on the factors in column ten. If, for example, column ten
	holds the ids of the seven centers included in the study, this command will 
	create seven copies of the dataset, each with individuals included in one
	specific center deleted. Say that the centers are numbered 1 to 7. Then
	dataset 1 will have individuals from center 1 excluded, dataset 2
	individuals from center 2 and so on.
EOF

$help_text{Options} = <<'EOF';  
	A NONMEM model file with successful termination is required as argument.

	The following options are valid:
EOF

$help_text{-case_column} = <<'EOF';
	-case_column=column_name|column_number

	Default is ID. Through this flag you set the column on which the case-
	deletion is done. You can either use the name of the column as specified in
	the $INPUT record in the model file or you can use the column number.
	Numbering starts with 1. 
EOF

$help_text{-h} = <<'EOF';
	-h | -?

	With -h or -? cdd will print a list of options and exit.
EOF

$help_text{-help} = <<'EOF';      
	-help

	With -help cdd will print this, longer, help message.
EOF

$help_text{-bins} = <<'EOF';
	-bins=number
	
	Default value = Number of unique values in the case column.
	Sets the number of databins, or cdd datasets, to use. If the number of
	unique values, or factors, in the case column is higher than the number of
	bins then one or more factors will be deleted in each cdd dataset.
	Specifying $number as higher than the number of factors will have no effect.
	The bin number is then set to the number of factors.
EOF

$help_text{-etas} = <<'EOF';
	-etas

	Use the phi file of the original model as initial estimates for the etas.
EOF

$help_text{-outside_n_sd_check} = <<'EOF';
-outside_n_sd_check='number'

	Default 2. Mark the runs with Cook score - Covariance ratio outside X standard
	deviations of the principal component analysis (PCA).
EOF

$help_text{-selection_method} = <<'EOF';
-selection_method='random' or 'consecutive'

Default consecutive. Specifies whether the factors selected for exclusion should
be drawn randomly or consecutively from the datafile.
EOF

$help_text{-update_inits} = <<'EOF';
	-update_inits

	By default, the initial estimates of the cdd models will be set to the final
	estimates of the input model if final estimates are available. If the user
	sets -no-update_inits, the initial estimates of the cdd models will be the
	same as the initial estimates set in the input model, even if final estimates
	from the input model are available.
EOF

$help_text{-xv} = <<'EOF';
	-xv|-no-xv

	Default false. Run the cross-validation step (-xv) or not (-no-xv),
EOF

$help_text{Post_help_message} = <<'EOF';
	Also see 'psn_options -h' for a description of common options.
EOF

common_options::online_help('cdd', \%options, \%help_text, \%required_options, \%optional_options);
common_options::setup(\%options, 'cdd'); #calls set_globals etc, initiates random sequence

## Check that we do have a model file
if (scalar(@ARGV) < 1) {
  print "A model file must be specified. Use 'cdd -h' for help.\n";
  exit;
}

if (scalar(@ARGV) > 1) {
  print "CDD can only handle one modelfile. Use 'cdd -h' for help.\n";die;
  exit;
}

if (defined $options{'dummy_data'}) {
  #never allow dummy_data with cdd
  $options{'dummy_data'} = 0;
}

require model;
require tool::cdd;

my $eval_string = common_options::model_parameters(\%options);

my $model = model->new(
    eval($eval_string),
    filename => $ARGV[0],
    ignore_missing_output_files => 1
);

if ($options{'shrinkage'}) {
  $model->shrinkage_stats(enabled => 1);
}

my $cdd = tool::cdd->new(
    eval($common_options::parameters),
    models => [ $model ],
    bins => $options{'bins'},
    selection_method => $options{'selection_method'},
    case_column => $options{'case_column'},
    update_inits => $options{'update_inits'},
    outside_n_sd_check => $options{'outside_n_sd_check'},
    cross_validate => $options{'xv'},
    etas => $options{'etas'},
);

$cdd->print_options(
    cmd_line => $cmd_line,
    toolname => 'CDD',
    local_options => [keys %optional_options,'cross_validate'],
    common_options => \@common_options::tool_options,
);

$cdd->run();
$cdd->prepare_results();
$cdd->print_results();

ui->print(category => 'cdd', message => "cdd done");
