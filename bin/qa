#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use File::Basename;
use Capture::Tiny 'tee_merged';
use common_options;
use Cwd;
use ui;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

my %options;
## Declare the options

my %required_options = ();

#option etas is not implemented, bootstrap always done on all etas
my %optional_options = (
    'dvid:s' => undef,
    'resmod_idv:s' => undef,
    'occ:s' => undef,
    'resmod_groups:i' => undef,
    'continuous_covariates:s' => undef,
    'categorical_covariates:s' => undef,
    'lst_file:s' => undef,
    'nonlinear!' => undef,
    'skip:s' => undef,
    'only:s' => undef,
    'add_etas:s' => undef,
    'nm_parallel:s' => undef,
    'estimation_options:s' => undef,
);

my $res = GetOptions( \%options,
    @common_options::get_opt_strings,
    keys(%required_options),
    keys(%optional_options) );
exit unless $res;



my %help_text;

$help_text{Pre_help_message} = <<'EOF';
    Quality assurance - a tool for multiple fast assessments of a model
EOF

$help_text{Description} = <<'EOF';
    The qa tool will perform multiple assessments of the input model covering
    different parts of the model.

    Many of the assessments does not need anything but the model from the user,
    but some need specific input to trigger the analyses.

    Multiple DVs:
    To assess multiple DVs correctly in the residual and structural models
    the -dvid option is needed.

    Covariates:
    To perform investigation of covariate effects the user needs to supply lists
    of the covariates via the -categorical_covariates and/or the
    -continuous_covariates options.

    Add IIV:
    Inter-individual variability for parameters that does not have it can be
    assessed by listing the interesting parameters with the -add_etas option.
    IIV will be added as an exponential and without any covariances.

    Add IOV:
    Inter-occasion variability can be assessed by setting which occasion
    column to use via the -iov option. IOV will be added to all parameters
    that have IIV using the same block structure.

    Extra independent variable:
    To add the assessment of residual and structural models for one
    extra independent variable other than TIME, TAD and PRED the
    -resmod_idv option should be used.
EOF

$help_text{Examples} = <<'EOF';
    qa run1.mod -continuous_covariates=WGT,AGE -categorical_covariates=SEX,RACE -add_etas=KA
    qa run262.mod -continuous=HT,WT,AGE -categorical=SEX -add_etas=V
    qa run112d.mod -cont=AGE,CRCL,WT -cat=SEX -dvid=CMT -add_etas=VMAX,KM,CLM,V6 -only=scm,frem
EOF

$help_text{Options} = <<'EOF';
    A model file is required as argument,

    The following options are valid:
EOF

$help_text{-h} = <<'EOF';
    -h | -?

    With -h or -? resmod will print a list of options and exit.
EOF

$help_text{-help} = <<'EOF';
    -help

    With -help resmod will print this, longer, help message.
EOF

$help_text{-add_etas} = <<'EOF';
    -add_etas

    A comma separated list of parameters to add etas to.
EOF

$help_text{-categorical_covariates} = <<'EOF';
    -categorical_covariates

    A comma-separated list of categorical covariates
EOF

$help_text{-continuous_covariates} = <<'EOF';
    -continuous_covariates

      A comma-separated list of continuous covariates
EOF

$help_text{-dvid} = <<'EOF';
    -dvid

    Name of the dvid column. Will only be used for the structural and residual
    model analysis.
EOF

$help_text{-resmod_groups} = <<'EOF';
    -resmod_groups

    The default is 10. Set the number of groups to use for the time varying models.
    Quantiles using this number will be calculated. See the resmod user guide
    for a detailed explanation.
EOF

$help_text{-resmod_idv} = <<'EOF';
    -resmod_idv

    Default is to use TIME,PRED and TAD (if present). Name of the independent
    variable for the structural and residual model analysis.
EOF

$help_text{-lst_file} = <<'EOF';
    -lst_file

    Default is to use an lst-file with the same name as the model. Set a NONMEM
    output file to be used for initial estimates.
EOF

$help_text{-nm_parallel} = <<'EOF';
    -nm_parallel

    Select a special NONMEM version to be used for the steps
    that run one NONMEM run at a time. Currently linearize
    and frem. The value of the threads option will be used for
    the number of nodes for these tools and threads will be set
    to one.
EOF

$help_text{-nonlinear} = <<'EOF';
    -nonlinear

    Default is off. Don't linearize the model and use the original non-linear
    model for all runs. This option is experimental.
EOF

$help_text{-occ} = <<'EOF';
    -occ

Name of the occasion column.
EOF

$help_text{-only} = <<'EOF';
    -only

    Only run one or more sections of the qa procedure. Takes a list of section
    names to run. The sections are: scm, frem, cdd, simeval, transform and resmod.
EOF

$help_text{-skip} = <<'EOF';
    -skip

    Skip one or more sections of the qa procedure. Takes a list of section
    names to skip. The sections are: scm, frem, cdd, simeval, transform and
    resmod.
EOF

$help_text{-estimation_options} = <<'EOF';
    -estimation_options

    Additional options to use when estimating the linearized models. Not used by default
EOF

common_options::online_help( 'qa', \%options, \%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'qa' ); #calls set_globals etc, initiates random sequence

## Check that we do have a model file
if (scalar(@ARGV) < 1) {
  print "A model file must be specified. Use 'qa -h' for help.\n";
  exit;
}

if (scalar(@ARGV) > 1) {
  print "qa can only handle one modelfile, you listed: ",
  join(',',@ARGV),". Use 'qa -h' for help.\n";die;
  exit;
}

if (not defined $options{'rplots'}) {
    $options{'rplots'} = 1;
}

ui->category('qa');
ui->silent(1) if ($options{'silent'});

require model;
require tool::qa;

my $main_directory = tool::get_rundir(
    create => 0,
    basename => 'qa_dir',
    model_dir_name => $options{'model_dir_name'},
    timestamp => $options{'timestamp'},
    modelname => $ARGV[0],
    directory_option => $options{'directory'},
    model_subdir => $options{'model_subdir'},
);
$options{'directory'} = $main_directory;
my $output_directory;
if ($options{'model_subdir'}) {
    $output_directory = dirname($main_directory);
}

my $eval_string = common_options::model_parameters(\%options);

my $model = model->new(
    eval($eval_string),
    filename => $ARGV[0],
    ignore_missing_output_files => 1,
    ignore_missing_data => 1,
    output_directory => $output_directory,
);

my $qa;
my $capture = tee_merged {
    $qa = tool::qa->new(
        eval( $common_options::parameters ),
        models => [$model],
        dvid => $options{'dvid'},
        idv => $options{'resmod_idv'},
        occ => $options{'occ'},
        groups => $options{'resmod_groups'},
        continuous => $options{'continuous_covariates'},
        categorical => $options{'categorical_covariates'},
        cmd_line => $cmd_line,
        lst_file => $options{'lst_file'},
        nonlinear => $options{'nonlinear'},
        skip => [split /,/, $options{'skip'}],
        only => [split /,/, $options{'only'}],
        add_etas => [split /,/, $options{'add_etas'}],
        nm_parallel => $options{'nm_parallel'},
        estimation_options => $options{'estimation_options'},
    );

    $qa->print_options(
        cmd_line => $cmd_line,
        toolname => 'qa',
        local_options => [keys %optional_options],
        common_options => \@common_options::tool_options
    );

    $qa->run();
};

$qa->write_captured_output($capture);
$qa->print_results();

ui->print(category => 'qa', message  => "Quality assurance done.\n");
