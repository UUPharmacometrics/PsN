#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use common_options;
use Cwd;
use ui;
use model_transformations;
use model_approximations;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

my %options;
## Declare the options

my %required_options = ();

#option etas is not implemented, bootstrap always done on all etas
my %optional_options = (
    'out:s' => undef,
    'etas:s' => undef,
    'epsilons:s' => undef,
    'fix!' => undef,
    'parameters:s' => undef,
    'ids:s' => undef,
    'ignore!' => undef,
    'occ:s' => undef,
    'dv:s' => undef,
);

my $res = GetOptions( \%options,
    @common_options::get_opt_strings,
    keys(%required_options),
    keys(%optional_options) );
exit unless $res;

my @valid_transformations = ( 'boxcox', 'tdist', 'full_block', 'add_tv', 'add_iov', 'remove_iiv', 'remove_iov', 'remove_0fix_omegas', 'omit_ids', 'iiv_on_ruv', 'power_on_ruv', 'diagonal_to_block', 'add_etas', 'uniform', 'remove_nonobs', 'derivatives' );
my $valid_transformations_string = join("\n", @valid_transformations);

my %help_text;

$help_text{Pre_help_message} = <<"EOF";
    Model transformation

    The following transformations are supported:
    $valid_transformations_string

EOF

$help_text{Examples} = <<'EOF';
    transform boxcox run1.mod
EOF

$help_text{Options} = <<"EOF";
    A model file and a transformation are required as arguments.

    The following options are valid:
EOF

$help_text{-h} = <<'EOF';
    -h | -?

    With -h or -? resmod will print a list of options and exit.
EOF

$help_text{-help} = <<'EOF';
    -help

    With -help resmod will print this, longer, help message.
EOF

$help_text{-etas} = <<'EOF';
    -etas

    List the etas to transform. Default is all etas. This option is valid
    for the boxcox and tdist transformations.
EOF

$help_text{-epsilons} = <<'EOF';
    -epsilons

    List the epsilons to transform. Default is all epsilons. This option is
    valid for the iiv_on_ruv transformations.
EOF

$help_text{-fix} = <<'EOF';
    -fix

    Fix the omegas to zero. This option is valid for the remove_iiv and
    remove_iov transformations.
EOF

$help_text{-ids} = <<'EOF';
    -ids

    Specify a list of ids. This option is mandatory for the omit_ids
    transformation.
EOF

$help_text{-ignore} = <<'EOF';
    -ignore

    Default the option is not set and changes are done to the dataset. Omit
    ids by using IGNORE statements in the model. This option is only valid
    for the omit_ids transformation.
EOF

$help_text{-occ} = <<'EOF';
    -occ

    Default is OCC. Specify the name of the occasion column. This option is
    valid for the add_iov transformation.
EOF

$help_text{-out} = <<'EOF';
    -out

    Specify a filename for the output model.
EOF

$help_text{-parameters} = <<'EOF';
    -parameters

    Specify list of parameters. This option is mandatory for the add_tv
    transformation.
EOF

$help_text{-dv} = <<'EOF';
    -dv

    Specify the dependent variable. Default is DV. This option can only be used for the
    remove_nonobs transformation.
EOF

common_options::online_help( 'transform', \%options, \%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'transform' ); #calls set_globals etc, initiates random sequence


if (scalar(@ARGV) < 2) {
  print "A transformation and a model file must be specified. Use 'transform -h' for help.\n";
  exit;
}

if (scalar(@ARGV) > 2) {
  print "transform can only handle one transformation and one modelfile, you listed: ",
  join(',',@ARGV),". Use 'transform -h' for help.\n";die;
  exit;
}

my $transformation = $ARGV[0];
my $input_filename = $ARGV[1];

if (not grep(/$transformation/, @valid_transformations)) {
    print "Unknown transformation: ", $transformation, "\n";
    print "Valid transformations are: ", join(", ", @valid_transformations), "\n";
    exit;
}

if (defined $options{'etas'}) {
    if ($transformation ne 'boxcox' and $transformation ne 'tdist' and $transformation ne 'uniform') {
        print "Option -etas cannot be used together with the $transformation transformation.\n";
        exit;
    }
}

if (defined $options{'epsilons'}) {
    if ($transformation ne 'iiv_on_ruv' and $transformation ne 'power_on_ruv') {
        print "Option -epsilons cannot be used together with the $transformation transformation.\n";
        exit;
    }
}

if (defined $options{'fix'}) {
    unless ($transformation eq 'remove_iiv' or $transformation eq 'remove_iov') {
        print "Option -fix cannot be used together with the $transformation transformation.\n";
        exit;
    }
}

if (defined $options{'ids'}) {
    unless ($transformation eq 'omit_ids') {
        print "Option -ids cannot be used together with the $transformation transformation.\n";
        exit;
    }
} else {
    if ($transformation eq 'omit_ids') {
        print "Option -ids need to be used together with the omit_ids transformation.\n";
        exit;
    }
}

if (defined $options{'ignore'}) {
    unless ($transformation eq 'omit_ids') {
        print "Option -ignore cannot be used together with the $transformation transformation.\n";
        exit;
    }
}

if (defined $options{'parameters'}) {
    unless ($transformation eq 'add_tv' or $transformation eq 'add_iov' or $transformation eq 'add_etas') {
        print "Option -parameters cannot be used together with the $transformation transformation.\n";
        exit;
    }
} else {
    if ($transformation eq 'add_tv' or $transformation eq 'add_etas') {
        print "Option -parameters need to be used together with the $transformation transformation.\n";
        exit;
    }
}

my $output_filename;
if (defined $options{'out'}) {
    $output_filename = $options{'out'};
} else {
    # Default handling of output filename.
    if ($input_filename =~ /^run(\d+)\.(mod|ctl)/) {
        # input filename is following the runno nomenclature
        my $runno = $1;
        my $extension = $2;
        my $current_closest_runno = $runno + 1;
        my @runnos;
        opendir my $dh, '.' || die "Can't open the current directory";
        while (readdir $dh) {
            /^run(\d+)\.(mod|ctl)/;
            push @runnos, $1;
        }
        closedir $dh;
        @runnos = sort { $a <=> $b } @runnos;
        for my $rn (@runnos) {
            if ($rn == $current_closest_runno) {
                $current_closest_runno++;
            }
        }
        $output_filename = "run$current_closest_runno.$extension";
    } else {
        # input filename is free form
        print "Input file name does not follow the run-number nomenclature. Please specify an output file name via the -out option\n";
        exit;
    }
}

require model;

my $eval_string = common_options::model_parameters(\%options);

my $model = model->new(
    eval($eval_string),
    filename => $input_filename,
    ignore_missing_output_files => 1,
    ignore_missing_data => 1,
);

$model->filename($output_filename);

if ($transformation eq 'boxcox') {
    if (defined $options{'etas'}) {
        model_transformations::boxcox_etas(model => $model, etas => [split ',', $options{'etas'}]);
    } else {
        model_transformations::boxcox_etas(model => $model);
    }
} elsif ($transformation eq 'tdist') {
    if (defined $options{'etas'}) {
        model_transformations::tdist_etas(model => $model, etas => [split ',', $options{'etas'}]);
    } else {
        model_transformations::tdist_etas(model => $model);
    }
} elsif ($transformation eq 'uniform') {
    if (defined $options{'etas'}) {
        model_transformations::uniform_etas(model => $model, etas => [split ',', $options{'etas'}]);
    } else {
        model_transformations::uniform_etas(model => $model);
    }
} elsif ($transformation eq 'full_block') {
    model_transformations::full_omega_block(model => $model);
} elsif ($transformation eq 'add_tv') {
    model_transformations::add_tv(model => $model, parameters => [ split ',', $options{'parameters'}]);
} elsif ($transformation eq 'add_iov') {
    my $occ;
    if (defined $options{'occ'}) {
        $occ = $options{'occ'};
    } else {
        $occ = 'OCC';
    }
    if (defined $options{'parameters'}) {
        model_transformations::add_iov(model => $model, occ => $occ, parameters => [split ',', $options{'parameters'}]);
    } else {
        model_transformations::add_iov(model => $model, occ => $occ);
    }
} elsif ($transformation eq 'add_etas') {
    model_transformations::add_etas_to_parameters(model => $model, parameters => [split ',', $options{'parameters'}]);
} elsif ($transformation eq 'remove_iiv') {
    if (defined $options{'fix'}) {
        model_transformations::remove_iiv(model => $model, fix => $options{'fix'});
    } else {
        model_transformations::remove_iiv(model => $model);
    }
} elsif ($transformation eq 'remove_iov') {
    if (defined $options{'fix'}) {
        model_transformations::remove_iov(model => $model, fix => $options{'fix'});
    } else {
        model_transformations::remove_iov(model => $model);
    }
} elsif ($transformation eq 'remove_0fix_omegas') {
    my $zero_fix = model_transformations::find_zero_fix_omegas(model => $model);
    model_transformations::_remove_omegas(model => $model, omegas => $zero_fix);
} elsif ($transformation eq 'omit_ids') {
    my $ignore = 0;
    if (defined $options{'ignore'}) {
        $ignore = $options{'ignore'};
    }
    model_transformations::omit_ids(model => $model, ids => [ split ',', $options{'ids'}], ignore => $ignore);
} elsif ($transformation eq 'iiv_on_ruv') {
    if (defined $options{'epsilons'}) {
        model_transformations::iiv_on_ruv(model => $model, epsilons => [ split ',', $options{'epsilons'} ]);
    } else {
        model_transformations::iiv_on_ruv(model => $model);
    }
} elsif ($transformation eq 'power_on_ruv') {
    if (defined $options{'epsilons'}) {
        model_transformations::power_on_ruv(model => $model, epsilons => [ split ',', $options{'epsilons'} ]);
    } else {
        model_transformations::power_on_ruv(model => $model);
    }
} elsif ($transformation eq 'diagonal_to_block') {
    model_transformations::diagonal_to_block(model => $model);
} elsif ($transformation eq 'remove_nonobs') {
    my $dv = 'DV';
    if (defined $options{'dv'}) {
        $dv = $options{'dv'};
    }
    model_transformations::remove_nonobs(model => $model, dv => $dv);
} elsif ($transformation eq 'derivatives') {
    model_approximations::derivatives_model(model => $model);
}

$model->_write();
