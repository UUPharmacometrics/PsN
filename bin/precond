#!/usr/bin/perl

# Only for Development
use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

# Perl includes #
use Config;
use strict;
use Getopt::Long;
# External modules #
use Math::Random;

# PsN includes #
use PsN;
use ui;
use common_options;
use Cwd;
use linear_algebra;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );
my %options;

my %required_options = (
);

my %optional_options = (
	"cov:s" => undef,
	"cholesky!" => undef,
    "in_filter:s" => undef,
	"nodec!" => undef,
    "offset_rawres:i" => undef,
	"output_model:s" => undef,
    "pre:s" => undef,
    "rawres_input:s" => undef,
	"update_model:s" => undef,
	"lu!" => undef,
	"perturb!" => undef,
	"eigen_comp_only!" => undef,
    "notalways!" => undef,
    "copy_data!" => undef,
	 "always!" => undef,
);

my $res = GetOptions( \%options,
					  @common_options::get_opt_strings,
						keys(%required_options),
					  keys(%optional_options) );

exit unless $res;


my %help_text;

$help_text{Pre_help_message} = <<'EOF';
	Model preconditioning to stabilize covariance calculations.
EOF

$help_text{Description} = <<'EOF';
	In order to increase the numerical stability of the variance covariance
	matrix computation, the precond tool creates and runs a linearly
	re-parameterised model of the original model that is less sensitive to
	rounding errors. We refer to this process as preconditioning and the
	created model as the preconditioned model.Through numerical experiments
	\cite{Aoki} using published nonlinear mixed effect models, it has been
	found that the preconditioning can reduce the computational environment
	dependency, increase the chance of successful covariance computation, and
	unveil un-identifiability of the model parameters. Preconditioning will
	automatically first run the model normally and if the covariance step fails,
	get the R-matrix from that run using that to precondition the model. The
	obtained R-matrix is decomposed using eigendecomposition and used to linearly
	re-parameterise the model in a way that the R-matrix of the preconditioned
	model is close to an identity matrix. This will reduce the influence of the
	rounding error for the computation of R matrix and often avoid the R-matrix
	appearing to be non-positive semi-definite.The precond tool will initiate
	the modelfit of the preconditioned model and then convert back the obtained
	estimated parameter and covariance matrix to the parameter scale of the
	original model.Preconditioning can also be used for the modelfits with
	successful covariance stepto verify that the resulting computation is not
	influenced by the computational error. Preconditioning of the model will
	only help to stabilise the computation so that if the model is fundamentally
	unidentifiable (or have other issues) then the covariance step of the
	preconditioned model should not be successful. 
EOF

$help_text{Examples} = <<'EOF';
	precond run1.mod

	Runs the model normally and, if the covariance step fails, preconditions it
	and runs it again.
EOF

$help_text{Options} = <<'EOF';
	A model file is required on the command line.

	The following options are valid:
EOF

$help_text{-always} = <<'EOF';
	-always

	Default set. Always do preconditioning. 
EOF

$help_text{-copy_data} = <<'EOF';
	-copy_data

	Default set. Disable with -no-copy_data. By default PsN will copy the data file
	into NM_run1 and set a local path in psn.mod, the actual model file run with
	NONMEM. If -no-copy_data is set, PsN will not copy the data to NM_run1 but
	instead set a global path to the data file in psn.mod. However, NONMEM will not
	accept a path longer than 80 characters.
EOF

$help_text{-cov} = <<'EOF';
	-cov

	Explicitly set the covariance matrix to use.
	If this option is used only the post processing step will be done.
EOF

$help_text{-cholesky} = <<'EOF';
	-cholesky

	Use cholesky decomposition of the preconditioning matrix instead of
	eigendecomposition. Wiith this option the preconditioning matrix provided by
	-pre option should be similar to variance covariance matrix or the inverse
	of R matrix (i.e., R matrix should not be used with this option).
EOF

$help_text{-eigen_comp_only} = <<'EOF';
	-eigen_comp_only

	With this option, precond will not execute any NONMEM run.  It will only
	compute the eigenvalues of the matrix that were to be used for the
	preconditioning.  Use this option with the -verbose option.
EOF

$help_text{-in_filter} = <<'EOF';
	-in_filter=comma-separated list of conditions

	Default not set. Only relevant in combination with rawres_input. The parameter
	estimates lines in the file can be filtered on values in the different columns.
	When specifying which column(s) the filtering should be based on, the exact
	column name must be used, e.g. minimization_successful. Filtering can only be
	based on columns with numeric values. The allowed relations are .gt. (greater
	than), .lt. (less than) and .eq. (equal to). Conditions are separated with
	commas. If the remaining number of lines after filtering is smaller than 2,
	covmat will stop with an error message. If the user has created a file with
	parameter estimates outside of PsN, filtering can be done on any numeric
	column in that file. Do not set column headers containing .eq. or .lt.
	or .gt.in the user-generated file as this would interfere with the in_filter
	option syntax.

	Example: -in_filter=minimization_successful.eq.1,significant_digits.gt.3.5
EOF

$help_text{-lu} = <<'EOF';
	-lu

	Use lu decomposition of the preconditioning matrix instead of eigendecomposition.
	With this option the preconditioning matrix provided by -pre option should
	be similar to variance covariance matrix or the inverse of R matrix. (i.e.,
	R matrix should not be used with this option)
EOF

$help_text{-nodec} = <<'EOF';
	-nodec

Turn off decomposition of preconditioning matrix.
EOF

$help_text{-notalways} = <<'EOF';
	-notalways

	Continue onto preconditioning only if the covariance step of the original
	model fails (without this option, the precond tool will always continue onto
	preconditioning to improve the the accuracy of the covariance matrix
	computation and also to potentially unveil the non-estimability of the model
	parameters). Note that the previously available option -always was replaced
	by -notalways as to always precondition is now the default. The -always
	option is still kept as a dummy option for backwards compatibility.
EOF

$help_text{-offset_rawres} = <<'EOF';
	-offset_rawres=N

	Default 0. The number of result lines to skip in the input raw results file
	before starting to read final parameter estimates. 
EOF

$help_text{-output_model} = <<'EOF';
	-output_model=filename

	This option will break the normal execution flow and have precond only create
	the preconditioned model without running it. The model will be created with
	the specified name.
EOF

$help_text{-perturb} = <<'EOF';
	-perturb 

	After the model is preconditioned the initial estimate is perturbed to the
	direction of the eigenvector that is corresponding negative eigenvalue of
	the R-matrix. This will increase the chance of finding the final parameter
	estimate that is not at the saddle point so that the R-matrix of the
	preconditioned model will be a positive semi-definite matrix.
EOF

$help_text{-pre} = <<'EOF';
	-pre=file or directory

	With this option the user can manually specify the R-matrix that will be used
	for preconditioning. In addition, a modelfit directory created by the execute
	command of PsN can be specified and R-matrix will be extracted from the
	directory.  In addition, any symmetric matrix can be provided as a .csv file
	or NONMEM matrix file; however, the specified matrix needs to be similar to
	R-matrix to improve the computational stability (i.e., using covariance
	matrix will reduce the computational stability).

	With this option the user can also specify a directory. If the modelfit
	directory is specified, the R-matrix is automatically extracted. If the precond
	directory is specified we can precondition the already preconditioned model.
	This will allow us to iteratively precondition deeply ill-conditioned model.
	In order for the iterative preconditioning to work properly, "precMatrix"
	file should be unmodified and available in the specified precond directory.
EOF

$help_text{-rawres_input} = <<'EOF';
	-rawres_input=rawresults file

	Use a rawresults file to create the preconditioning matrix.
EOF

$help_text{-update_model} = <<'EOF';
	-update_model=filename

	Set a filename to store the original model with updated inital values for the 
	parameters.
EOF

$help_text{-verbose} = <<'EOF';
	-verbose

	Print the eigenvalues of the matrix that will be used to precondition the model.
EOF


common_options::online_help('precond', \%options, \%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'precond' ); #calls set_globals etc, initiates random sequence

my $model_filename = $ARGV[0];

if (@ARGV < 1) {
	die "A model file must be specified. See precond -h for help";
}

if (defined $options{'pre'} and defined $options{'rawres_input'}) {
    die "Only one of options -pre and -rawres_input is allowed";
}

if (not -e $model_filename) {
	die "Model file $model_filename could not be found\n";
}

if (not defined $options{'offset_rawres'}) {
  $options{'offset_rawres'} = 0;
}

require model;
require tool::precond;
require tool::sir;

my $eval_string = common_options::model_parameters(\%options);

unless (defined $options{'copy_data'} and (not $options{'copy_data'})) {
    $options{'copy_data'} = 1;
}

my $model = model->new(
	eval($eval_string),
	filename => $model_filename,
	ignore_missing_files => 1,
	skip_data_parsing => 1,
	ignore_missing_data => 1,
);

if (scalar(@{$model->problems}) != 1) {
	die("Precond can only handle modelfiles with exactly one problem\n");
}

if (not defined $model->problems->[0]->thetas or scalar(@{$model->problems->[0]->thetas}) == 0) {
    die("Precond can only precondition models that have thetas\n");
}

my @precMatrix;
my @negaEigIndex;

if (defined $options{'rawres_input'}) {
    my @in_filter = ();
    if (defined $options{'in_filter'}) {
        #split string, assume comma separated
        foreach my $filt (split(/,/, $options{'in_filter'})) {
            if ($filt =~ /.\.(gt|lt|eq)\.\d+\.?\d*/) {
                push(@in_filter, $filt);
            } else {
                die "Input filter $filt does not fulfill the format rules.\n";
            }
        }
        if (scalar(@in_filter) < 1) {
            die "Error: Option in_filter used, but list of conditions could not be parsed.\n";
        }
    }
    my ($sampled_params_arr, $labels_hash) = model::get_rawres_params(
        filename => $options{'rawres_input'},
        filter => \@in_filter,
        offset => $options{'offset_rawres'},
        model => $model,
    );

    foreach my $sample (@$sampled_params_arr) {
        $sample->{'resamples'} = 1;
    }

    my $resulthash = tool::sir::empirical_statistics(
        sampled_params_arr => $sampled_params_arr,
        labels_hash => $labels_hash
    );

    @precMatrix = @{$resulthash->{'covar'}};

} elsif (defined $options{'pre'}) {

    my $file;
    my $fh;

    if (-d $options{'pre'}) {
        $file = $options{'pre'} . "/NM_run1/psn.rmt";
        my $file2 = $options{'pre'} . "NM_run1/psn.rmt";
        my $file3;
        if (-e ($options{'pre'} . '/precMatrix')) {
            ($file3) = glob $options{'pre'} . "/m1/*_repara.rmt";
        } else {
            ($file3) = glob $options{'pre'} . "/m1/*_base.rmt";
        }
        if (-e $file) { 
        } elsif (-e $file2) {
            $file = $file2;
        } elsif (-e $file3) {
            $file = $file3;
        }
        print "\n Precondition using R-matrix:";
    } else {
        $file = $options{'pre'};
        print "\n Precondition using matrix:";
    }

    open($fh, '<', $file) or die "\nCannot open the preconditioning matrix: '$file'\n\n";

    print "'$file'\n\n";

    # Read either a nonmem .cov file or an ordinary csv file without header
    my $line = <$fh>;
    if ($line =~ /^TABLE NO./) {
        <$fh>;
        my $numtheta = 0;
        while (my $line = <$fh>) {
            chomp $line;
            my @fields = split(/\s+/, $line);
            shift @fields;
            my $a = shift @fields;
            if ($a =~ /^THETA/) {
                $numtheta++;
            }
            push @precMatrix, \@fields;
        }
        linear_algebra::reduce_matrix(\@precMatrix, $numtheta);
    } else {
        seek $fh, 0, 0;
        while (my $line = <$fh>) {
            chomp $line;
            my @fields = split(/,/, $line);
            push @precMatrix, \@fields;
        }
    }
}

if (defined $options{'pre'} or defined $options{'rawres_input'}) {
    tool::precond::preprocess_precond_matrix(precond_matrix => \@precMatrix, nthetas => $model->nthetas);

    # Decompose (or not) the matrix
    if ((not $options{'nodec'})) {
        if ($options{'cholesky'}) {

            print "Warning: With -cholesky option, older version of the precond algorithm will be used, make sure to specify the preconditioning matrix that is similar to covariance matrix (do not use R-matrix)\n\n";

            my @A = map { [@$_] } @precMatrix;
            linear_algebra::transpose(\@A);
            my $B = linear_algebra::subtract(\@A, \@precMatrix);
            linear_algebra::absolute($B);
            my $max_diff = linear_algebra::max($B);
            if ($max_diff > 1e-8) {
                print "Warning: The matrix you are using does not seem to be symmetric. The maximum difference between elements is $max_diff\n";
            }

            # Swap to column order
            linear_algebra::transpose(\@precMatrix);
            my $error = linear_algebra::cholesky(\@precMatrix);
            if ($error) {
                die "Unable to perform cholesky decomposition: matrix is not positive-definite";
            }
            # Swap back to row order
            linear_algebra::transpose(\@precMatrix);
            # Create L matrix
            for (my $row = 0; $row < @precMatrix; $row++) {
                for (my $col = $row + 1; $col < @precMatrix; $col++) {
                    $precMatrix[$row]->[$col] = 0;
                }
            }

        } elsif($options{'lu'}) {
            print "Warning: With -lu option, older version of the precond algorithm will be used, make sure to specify the preconditioning matrix that is similar to covariance matrix (do not use R-matrix)\n\n";


            my $dummy = linear_algebra::LU_factorization(\@precMatrix);
            for (my $row = 0; $row < @precMatrix; $row++) {		# Quick hack to get the L matrix
                @precMatrix[$row]->[$row] = 1;
                for (my $col = $row + 1; $col < @precMatrix; $col++) {
                    @precMatrix[$row]->[$col] = 0;
                }
            }

        } else {
            my @eigenValMatrix = map { [@$_] } @precMatrix;
            (my $eigen, my $Q) = linear_algebra::eigenvalue_decomposition(\@eigenValMatrix);

            my $abs_eigens = array::absolute($eigen);
            my $maxEigen = array::max($abs_eigens);
            my $minEigen = array::min($abs_eigens);

            my $negaCounter = 0;
            foreach my $index (0 .. scalar(@$eigen) - 1) {
                if ($eigen->[$index] < 0) {
                    if ($options{'perturb'}) {
                        $negaEigIndex[$negaCounter] = $index;
                    }
                    $negaCounter++;
                }
            }

            print "Condition number of the R-matrix : 10^" . int(log($maxEigen / $minEigen) / log(10)) . "\n";
            print "Number of negative eigenvalues : $negaCounter\n";

            if ($options{'verbose'} or $options{'eigen_comp_only'}) {
                print "=== Eigenvalues ===\n";
                array::print($eigen);
                print "===================\n";
            }

            if (defined $options{'pre'}) {

                # Check if run was the result of preconditioning
                my $file = $options{'pre'} . "/precMatrix";
                my $file2 = $options{'pre'} . "precMatrix";

                if (-e $file) { 
                } elsif(-e $file2) {
                    $file = $file2;
                }

                if (-e $file) {
                    print "\n\n Pre-Precondition using matrix: '$file'\n\n";

                    open(my $fh, '<', $file) or die "Cannot find the file" . $file . "precMatrix so prepre option cannot be used \n";

                    # Read a space separated data file
                    my @preprecMatrix;
                    while (my $line = <$fh>) {
                        chomp $line;
                        my @fields = split(/\s+/, $line);
                        push @preprecMatrix, \@fields;
                    }
                    close $fh;

                    my @Lambdainv;
                    for(my $i = 1; $i < scalar(@preprecMatrix) + 1; $i++) {
                        $Lambdainv[$i - 1] = 0;
                        for (my $j = 0; $j < scalar(@preprecMatrix); $j++) {
                            $Lambdainv[$i - 1] = $Lambdainv[$i - 1] + $preprecMatrix[$j][$i] * $preprecMatrix[$j][$i];
                        }
                        $Lambdainv[$i - 1] = 1.00 / $Lambdainv[$i - 1];
                        for (my $j = 0; $j < scalar(@preprecMatrix); $j++) {
                            $preprecMatrix[$j][$i] = $Lambdainv[$i - 1] * $preprecMatrix[$j][$i];
                        }
                    }

                    my @precMatrix_copy = map { [@$_] } @precMatrix;

                    if (scalar(@preprecMatrix) != scalar(@precMatrix)) {
                        die "Size of precMatrix and preprecMatrix not consistent"
                    }

                    my $tempSum = 0;

                    for (my $i = 0; $i < scalar(@precMatrix_copy); $i++) {
                        for (my $j = 0; $j < scalar(@precMatrix_copy); $j++) {
                            $tempSum = 0;
                            for (my $k = 0; $k < scalar(@precMatrix_copy); $k++) {
                                $tempSum = $tempSum + $precMatrix_copy[$k][$j] * $preprecMatrix[$i][$k + 1];
                            }
                            $precMatrix[$i][$j] = $tempSum;
                        }
                    }

                    @precMatrix_copy = map { [@$_] } @precMatrix;

                    my $tempSum = 0;

                    for (my $i = 0; $i < scalar(@precMatrix_copy); $i++) {
                        for (my $j = 0; $j < scalar(@precMatrix_copy); $j++) {
                            $tempSum = 0;
                            for (my $k = 0; $k < scalar(@precMatrix_copy); $k++) {
                                $tempSum = $tempSum + $precMatrix_copy[$i][$k] * $preprecMatrix[$j][$k + 1];
                            }
                            $precMatrix[$i][$j] = $tempSum;
                        }
                    }

                    @eigenValMatrix = map { [@$_] } @precMatrix;

                    ($eigen, $Q) = linear_algebra::eigenvalue_decomposition(\@eigenValMatrix);

                    $abs_eigens = array::absolute($eigen);
                    $maxEigen = array::max($abs_eigens);
                    $minEigen = array::min($abs_eigens);

                    $negaCounter = 0;
                    foreach my $index (0 .. scalar(@$eigen) - 1) {
                        if ($eigen->[$index] < 0) {
                            if ($options{'perturb'}) {
                                $negaEigIndex[$negaCounter] = $index;
                            }
                            $negaCounter++;
                        }
                    }

                    print "===Reconstructed R-matrix of the original model===\n";
                    print "Condition number of the R-matrix : 10^" . int(log($maxEigen/$minEigen)/log(10)) . "\n";
                    print "Number of negative eigenvalues : $negaCounter\n";

                    if ($options{'verbose'} or $options{'eigen_comp_only'}) {
                        print "=== Eigenvalues ===\n";
                        foreach my $e (@$eigen) {
                            print "$e\n";
                        }
                        print "===================\n";
                    }

                }

            }

            if ($options{'eigen_comp_only'}) {
                die "Eigenvalue Calculation Only";
            }

            for (my $index1 = 0; $index1 < scalar(@precMatrix); $index1++) {
                for (my $index2 = 0; $index2 < scalar(@precMatrix); $index2++) {
                    $precMatrix[$index1][$index2] = $Q->[$index1]->[$index2] / sqrt(abs($eigen->[$index2]));
                }
            }

        }
    }
}

my $only_do_pre_step;
if ($options{'output_model'}) {
	$only_do_pre_step = 1;
}
my $only_do_post_step;
if ($options{'cov'}) {
	$only_do_post_step = 1;
}

if ($only_do_pre_step) {
	tool::precond::create_reparametrized_model(
		filename => $options{'output_model'},
		model => $model,
		precond_matrix => \@precMatrix,
	);

} elsif ($only_do_post_step) {
	tool::precond::convert_reparametrized_cov(
		cov_filename => $options{'cov'},
		model => $model,
		precond_matrix => \@precMatrix,
		output_filename => 'output.cov',
	);

} else {

    my $dummy_model = model->create_dummy_model;

    my $precMatrix_ref;
    if (scalar(@precMatrix) > 0) {
        $precMatrix_ref = \@precMatrix;
    }
    my $precond = tool::precond->new(eval($common_options::parameters),
        precond_matrix => $precMatrix_ref,
        models => [ $dummy_model ],
        precond_model => $model,
        update_model => $options{'update_model'},
        negaEigenIndex => \@negaEigIndex,
		notalways => $options{'notalways'},
        verbose => $options{'verbose'},
        perturb => $options{'perturb'},
        copy_data => $options{'copy_data'},
    );

    $precond->print_options (cmd_line => $cmd_line,
        toolname => 'PRECOND',
        local_options => [keys %optional_options],
        common_options => \@common_options::tool_options);

    $precond->run;

    print "\nprecond done\n";
}
