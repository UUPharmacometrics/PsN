#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use common_options;
use ui;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

my %options;

my %required_options = ( "thetas:s"=>'theta list',
			 "omegas:s"=>'omega list',
			 "sigmas:s"=>'sigma list' );

my %optional_options = ( "max_iterations:i" => '',
			 "normq:f" => '',
			 "outputfile:s" => '',
			 "ofv_increase:f" => '',
			 "significant_digits:i" => '',
			 "rse_thetas:s" => 'theta rel. SE list',
			 "rse_omegas:s" => 'omega rel. SE list',
			 "rse_sigmas:s" => 'sigma rel. SE list',
);

my $res = GetOptions( \%options, 
		      @common_options::get_opt_strings,
		      keys(%required_options),
		      keys(%optional_options) );

exit unless $res;


my %help_text;

$help_text{Pre_help_message} = <<'EOF';
	Log-likelihood Profiling
EOF

$help_text{Description} = <<'EOF';

	The llp (Log Likelihood Profiling) tool is used to calculate confidence
	intervals of parameter estimates. Without the llp tool the confidence
	intervals can be calculated with the standard errors (SE) of the parameters
	under the assumption that the parameter values are normally distributed.
	The llp tool, however, makes no assumption of the shape of the distribution.
	The llp tool will calculate the confidence intervals for any number of
	parameters in the model, working with one parameter at a time. By first
	fitting the original model and then fixing the parameter at values close to
	the NONMEM estimate, the llp tool obtains the difference in likelihood between
	the original model and new, reduced model. The logarithm of the difference
	in likelihood is chi2 distributed and when that value is 3.84, the parameter
	value is at the 95% confidence limit. The search for the limit is done on
	both sides of the original parameter value, and thus the llp tool makes no
	assumption of symmetry or the parameter value distribution.  
EOF

$help_text{Examples} = <<'EOF';
	llp run89.mod -thetas=1,2

	This will make the llp tool try to estimate the confidence intervals for
	thetas one and two of the model in run89.mod. It will base the first guesses
	on the SE estimates from run89.lst.

	llp run89.mod -thetas=1,2 -rse_thetas=20,30

	In this example, we explicitly specify the relative SE which is necessary 
	if we do not have an output file with SE estimates.
EOF

$help_text{Options} = <<'EOF';

	A model file is required on the command line. Then, at least one of the options
	-omegas, -sigmas or -thetas must be specified. If an lst-file with SE estimates
	already exists, no more input is needed. Otherwise, for each specified (parameter)
	(theta/omega/sigma) there must be a corresponding rse-value given by option -rse
	(parameter).

	The following options are valid:
EOF

$help_text{-h} = <<'EOF';
	-h | -?

	With -h or -? llp will print a list of options and exit.
EOF

$help_text{-help} = <<'EOF';
	-help

	With -help llp will print this, longer, help message.
EOF

$help_text{-max_iterations} = <<'EOF';
	-max_iterations=N

	Default value is 10. This number limits the number of search iterations for
	each interval limit. If the llp has not found the upper limit for a parameter
	after max_iteration number of guesses it terminates.
EOF

$help_text{-normq} = <<'EOF';
	-normq=X

	Default value is 1.96. The value is used for calculating the first guess of
	the confidence interval limits. If the SE exist, the guess will be maximum
	likelihood estimate ± normq * SE, otherwise it will be
	MLE ± normq * rse_parameter/100 * MLE, where rse_parameter is rse_thetas, 
	rse_omegas or rse_sigmas (optional input parameters). The default value of
	normq translates to a 95% confidence interval assuming normal distribution
	of the parameter estimates.
EOF

$help_text{-ofv_increase} = <<'EOF';
	-ofv_increase=X

	Default value is 3.84.The increase in objective function value associated with
	the desired confidence interval. 
EOF

$help_text{-omegas} = <<'EOF';
	-omegas=comma-separated list of parameter numbers

	A comma-separated list, specifying the omegas for which the llp should try to
	assess confidence intervals. The numbers refer to the order number of the
	initial values in the model file. For example, if first there is a block record
	with size 2 (3 initial values) and then there is a diagonal record with size 3,
	then the numbers 4,5 and 6 refer to the diagonal elements.
EOF

$help_text{-outputfile} = <<'EOF';
	-outputfile=filename

	The name of the NONMEM output file. The default value is the name of the model
	file with the extension substituted with '.lst'. 
	  Example: if the modelfile is run89.mod, llp will by default look for the
	  outputfile run89.lst. If the name of the output file does not follow this
	  standard, the name must be specifed with this option. 
EOF

$help_text{-rse_omegas} = <<'EOF';
	-rse_omegas=comma-separated list of relative standard errors

	A comma-separated list specified in percent (%), for each omega listed by
	option -omegas.
EOF

$help_text{-rse_sigmas} = <<'EOF';
	-rse_sigmas=comma-separated list of relative standard errors

	A comma-separated list specified in percent (%), for each sigma listed by
	option -sigmas.
EOF
$help_text{-rse_thetas} = <<'EOF';
	-rse_thetas=comma-separated list of relative standard errors

	A comma-separated list specified in percent (%), for each theta listed by
	option -thetas.
EOF

$help_text{-sigmas} = <<'EOF';
	-sigmas=comma-separated list of parameter numbers

	A comma-separated list, specifying the sigmas for which the llp should try
	to assess confidence intervals. The numbers refer to the order number of the
	initial values in the model file. For example, if first there is a block
	record with size 2 (3 initial values) and then there is a diagonal record
	with size 3, then the numbers 4, 5 and 6 refer to the diagonal elements.
EOF

$help_text{-significant_digits} = <<'EOF';
	-significant_digits=X

	Default 3. Specifies the number of significant digits that are required for
	the test of the increase in objective function value. The default is 3, which
	means that the method will stop once the difference in objective function
	value is between 3.835 and 3.845 if -ofv_increase is set to its default value
	3.84.
EOF

$help_text{-thetas} = <<'EOF';
	-thetas=comma-separated list of parameter numbers

	A comma-separated list, specifying the thetas for which the llp should try
	to assess confidence intervals.
EOF

$help_text{Post_help_message} = <<'EOF';
Also see 'psn_options -h' for a description of common options.
EOF

common_options::online_help( 'llp', \%options, \%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'llp' ); #calls set_globals etc, initiates random sequence

## Check that we do have a model file
if ( scalar(@ARGV) < 1 ) {
  print "At least on model file must be specified. Use 'llp -h' for help.\n";
  exit;
}

if( scalar(@ARGV) > 1 ){
  print "LLP can only handle one modelfile. Use 'llp -h' for help.\n";
  exit;
}

unless( $options{'thetas'} or $options{'omegas'} or $options{'sigmas'}){
  print "You must specify one of the '--thetas', '--omegas' or '--sigmas' options\n";
  exit;
}

my @thetas     = split( ',',$options{'thetas'} );
my @omegas     = split( ',',$options{'omegas'} );
my @sigmas     = split( ',',$options{'sigmas'} );
my @rse_thetas = split( ',',$options{'rse_thetas'} );
my @rse_omegas = split( ',',$options{'rse_omegas'} );
my @rse_sigmas = split( ',',$options{'rse_sigmas'} );

my ( %checked_rse_thetas, %checked_rse_omegas, %checked_rse_sigmas );

foreach my $param ( 'thetas', 'omegas', 'sigmas' ) {
  my $nse = eval('$#rse_'.$param)+1;
  if ( $nse > 0 ) {
    my $npa = eval('$#'.$param)+1;
    die "The number of $param ($npa) does not match the number of relative standard errors ($nse)\n"
      if ( not $npa == $nse );
    for ( my $i = 0; $i < $npa; $i++ ) {
      eval( '$checked_rse_'.$param.'{$'.$param.'['.$i.']} = $rse_'.$param."[$i]" ),"\n";
    }
  }
}

require model;
require tool::llp;

my $eval_string = common_options::model_parameters(\%options);

my $model = model -> new ( eval( $eval_string ),
			   filename                    => $ARGV[0],
			   ignore_missing_output_files => 1);

if( $options{'nonparametric_etas'} or
    $options{'nonparametric_marginals'} ) {
  $model -> add_nonparametric_code;
}
	
if( $options{'shrinkage'} ) {
  $model -> shrinkage_stats( enabled => 1 );
}

#input check that no block sigma or omega

foreach my $param ('omega','sigma'){
	my @parnum;
	if ($param eq 'omega'){
		@parnum = @omegas;
	}else{
		@parnum = @sigmas;
	}
	next unless (scalar(@parnum)>0);

	my $labels = $model -> labels ( parameter_type => $param,
									generic => 1); #arr over probs
	for (my $prob=0; $prob < scalar(@{$labels}); $prob++){ 
		my %block_hash;
		my $coord = $model->problems->[$prob]->get_estimated_attributes(parameter=>$param,
																		attribute=> 'coordinate_strings');
		my $block = $model->problems->[$prob]->get_estimated_attributes(parameter=>$param,
																		attribute=> 'block_number');
		for (my $i=0; $i<scalar(@{$coord}); $i++){
			$block_hash{$coord->[$i]} = $block->[$i];
		}

		foreach my $num (@parnum){
			my $lab = $labels->[$prob]->[$num-1];
			if( $block_hash{$lab} > 0){
				die "$param number $num, which is $lab, is part of a block and cannot be individually FIXed\n";
			}
		}
	}
}
## Create new Llp object:
my $llp = tool::llp -> 
	new ( eval( $common_options::parameters ),
		  max_iterations     => $options{'max_iterations'},
		  models		   => [ $model ],
		  normq              => $options{'normq'},
		  ofv_increase       => $options{'ofv_increase'},
		  significant_digits => $options{'significant_digits'},
		  run_thetas         => [\@thetas],
		  run_omegas         => [\@omegas],
		  run_sigmas         => [\@sigmas],
		  rse_thetas         => [\%checked_rse_thetas],
		  rse_omegas         => [\%checked_rse_omegas],
		  rse_sigmas         => [\%checked_rse_sigmas]);

$llp-> print_options (cmd_line => $cmd_line,
		      toolname => 'LLP',
		      local_options => [keys %optional_options],
		      common_options => \@common_options::tool_options);

  $llp -> run;
  $llp -> prepare_results();
  $llp -> print_results;

ui -> print( category => 'llp',
	     message  => "llp done\n");
