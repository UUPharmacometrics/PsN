#!/usr/bin/perl 

# Only for Development
use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

# Perl includes #
use Config;
use strict;
use Getopt::Long;
# External modules #
use Math::Random;
# PsN includes #
use PsN;
use common_options;
use ui;
use Cwd;
use include_modules;
use model_transformations;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

my %options;

my %required_options = ();
my %optional_options = ( "predict_data:s" => undef,
			 "predict_model:s" => undef,
			 "reduced_model_ofv:f" => undef,
			 "prepend_options_to_lst!"=> undef,
			 "timestamp!" => undef,
			 "model_dir_name!" => undef,
			 "tail_output!" => undef,
			 "wintail_exe:s" => undef,
			 "wintail_command:s" => undef,
			 "copy_data!"=>undef,
             "boxcox!" => undef,
             "etas!" => undef,
			 );

my $res = GetOptions( \%options,
					  @common_options::get_opt_strings,
					  keys(%optional_options) );

exit unless $res;



my %help_text;

	$help_text{Pre_help_message} = <<'EOF';
    Running one or more modelfiles using PsN.
EOF

    $help_text{Description} = <<'EOF';
    The execute program is a PsN tool that allows you to run multiple modelfiles either sequentially or in parallel. 
	It is an nmfe replacement with advanced extra functionality.
	The execute program creates subdirectories where it puts NONMEMs input and output files, to make sure that parallel 
	NONMEM runs do not interfere with each other. The top directory is by default named 'modelfit_dirX' where 'X' is a 
	number that starts at 1 and is increased by one each time you run the execute program. When the NONMEM runs are 
	finished, the output and table files will be copied to the directory where execute started in which means that you can 
	normaly ignore the 'modelfit_dirX' directory. If you need to access any special files you can find them inside the  
	'modelfit_dirX'. Inside the 'modelfit_dirX' you find a few subdirectories named 'NM_runY'. For each model file you 
	specified on the command line there will be one 'NM_runY' directory in which the actual NONMEM execution takes place. 
	The order of the 'NM_runY' directories corresponds to the order of the modelfiles given on the command line. The first run 
	will take place inside 'NM_run1', the second in 'NM_run2' and so on. The execute script is a PsN tool that allows you to run 
	multiple modelfiles either sequentially or in parallel. It is an nmfe replacement with advanced extra functionality.
EOF

    $help_text{Examples} = <<'EOF';    
    Run one model file and accepts all default values:
    execute pheno.mod

	Run two model files in parallel using 5 possible retries:
    execute -threads=2  -retries=5 phenobarbital.mod pheno_alternate.mod

EOF

    $help_text{Options} = <<'EOF';
	A model file is required as argument.

    The following options are valid:
EOF
	$help_text{-boxcox} = <<'EOF';
    -boxcox
    
    Set to boxcox transform all ETAs before running. Cannot be used on models with multiple $PROBLEMs.
EOF
	$help_text{-copy_data} = <<'EOF';
    -copy_data
    
	Default set. By default PsN will copy the data file into NM_run1 and set a local path in psn.mod, the actual
    model file run with NONMEM. Disable with -no-copy_data. If -no-copy_data is set, PsN will not copy 
    the data to NM_run1 but instead set a global path to the data file in psn.mod. However, NONMEM will not accept a path longer than 80
	characters.
EOF
	$help_text{-etas} = <<'EOF';
    -etas
    
    If available, use the phi-file of the previous run as initial estimates for the etas. The phi-file will be used in $ETAS.
EOF
	$help_text{-model_dir_name} = <<'EOF';
    -model_dir_name
   
    Default not set. This option changes the basename of the run directory 
    from modelfit_dir to modelfile.dir. where modelfile is the name of 
    the first model file in the list given as arguments to execute. The 
    directories will be numbered starting from 1, increasing the number 
    each time execute is run with a model file with the same name. If the 
    option directory is used it will override -model_dir_name.
EOF
	$help_text{-predict_data} = <<'EOF';
    -predict_data='string'
    
	Only allowed in combination with -predict_model.
	Create copy of model with new file named predict_model, turn off estimation 
	(MAXEVAL=0 or corresponding), change data file to -predict_data and then run.
EOF

	$help_text{-predict_model} = <<'EOF';
    -predict_model='string'
    
	Only allowed in combination with -predict_data.
	Create copy of model with new file named predict_model, turn off estimation 
	(MAXEVAL=0 or corresponding), change data file to -predict_data and then run.
EOF
    $help_text{-prepend_options_to_lst} = <<'EOF';
    -prepend_options_to_lst
    
	This option makes PsN prepend the final lst-file (which is copied 
    back to the directory from which execute was called) with the 
    file version_and_option_info.txt which contains run information, including
    all actual values of optional PsN options. PsN can still parse the  
    lst-file with the options prepended, so the file can still be used it as 
    input to e.g. sumo, vpc or update_inits. Option can be disabled with 
    -no-prepend_options_to_lst if it is set in psn.conf. 
EOF
	$help_text{-reduced_model_ofv} = <<'EOF';
    -reduced_model_ofv=reference_ofv
    
	Default not set. When this option is used, the behaviour of
	the retries functionality of PsN is modified to keep adding retries
	until either a lower ofv than -reduced_model_ofv is obtained, or
	until the maximum number of retries (option -retries) is reached.
EOF
    $help_text{-tail_output} = <<'EOF';
    -tail_output
    
	This option only works for execute under Windows.
    tail_output specifies that execute
    should invoke a program (tail) that displays the output file,
    including the gradients, during minmization. The tail program is started
    automatically but it is up to the user to terminate the program.

    For the tail_output option to work, a third party
    tail program must be installed. Tail programs that are known to work
    are WinTail and Tail for Win32.  The latter is recommended and can
    be downloaded at http://tailforwin32.sourceforge.net. It
    is also necessary to have correct settings of the variables 
    wintail_exe, which is the path to the tail program, and wintail_command,
    which is the command for the tail program. 
    An example, which works for the Tail for Win32 package, is
    wintail_exe = 'C:\Program Files\Tail-4.2.12\Tail.exe'
    and
    wintail_command = 'tail OUTPUT'
    These two variables must be set in psn.conf, or given on the command-line,
    using the form shown here, including quotation marks.
EOF
	$help_text{-timestamp} = <<'EOF';
    -timestamp
    
	Default not set. This option changes the name of the run directory to $langle$modelfile$rangle$-PsN-$langle$date$rangle$
	where $langle$modelfile$rangle$ is the name of the first model file in the list given as arguments, without the extension,
	and $\langle$date$\rangle$ is the time and date the run was started. 
	Example: directory name run1-PsN-2014-06-12-152502 for a run that was started at 15:25:02 June 12th in year 2014.
	This option is specific to execute.
	If the option directory is used it will override -timestamp.
EOF
	$help_text{-wintail_command} = <<'EOF';
    -wintail_command='string'
    
	Only for Windows. See execute -h tail_output for description.
EOF
	$help_text{-wintail_exe} = <<'EOF';
    -wintail_exe='string'
    
	Only for Windows. See execute -h tail_output for description.
EOF
	$help_text{Post_help_message} = <<'EOF';
EOF


common_options::online_help('execute', \%options,\%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'execute' ); #calls set_globals etc, initiates random sequence

require tool::modelfit;
require model;
require input_checking;

#bad to request user input if wrapper script was used to start PsN. Just make this easy to invoke 
#manually after installing
if ( 0 and $options{'directory'} and (scalar(@ARGV)==1) and (-d $options{'directory'}) and
    (-d $options{'directory'}.'/NM_run1') and (not -d $options{'directory'}.'/NM_run2') and 
    (-e $options{'directory'}.'/NM_run1/stats-runs.csv') and
    (not -e $options{'directory'}.'/NM_run1/psn.lst')) {
  #if single input model and NM_run1 exists and stats-runs exists but not psn.lst,
  #then remove old run directory before starting run.
  print "This looks like a restart of a previously failed run.\n".
      "Do you want to remove the old ".$options{'directory'}." before starting [y/n] ?\n";
  my $input = <STDIN>;
  if( $input =~ /^\s*[yY]\s*$/ ){
    my $dir = $options{'directory'}.'/NM_run1';
    my @files = <$dir/*>;
    foreach my $file (@files){
      unlink ($file);
    }
    rmdir $dir;
    $dir = $options{'directory'};
    my @files = <$dir/*>;
    foreach my $file (@files){
      unlink ($file);
    }
    rmdir $dir;
    print "Removed the old ".$options{'directory'}.".\n"
  }else{
    print "Did not remove the old ".$options{'directory'}.".\n"
  }

}

## Set the automatic renaming of modelfit directory
my $main_directory = tool::get_rundir(create => 0,
									  basename => 'modelfit_dir',
									  model_dir_name => $options{'model_dir_name'},
									  timestamp => $options{'timestamp'},
									  modelname => $ARGV[0],
									  directory_option => $options{'directory'});
$options{'directory'} = $main_directory;


if ( scalar( @ARGV ) < 1 ) {
   croak("At least one model file must be specified. Use 'execute -h' for help.");
}

my $models_array;


my $eval_string = common_options::model_parameters(\%options);

foreach my $model_name (@ARGV) {  
	my $model;
	$model = model->new(
        eval($eval_string),
        filename => $model_name,
        parse_output => 0,
        ignore_missing_output_files => 1,
    );

	input_checking::check_options(tool => 'execute', options => \%options, model => $model);

    if ($options{'boxcox'}) {
        model_transformations::boxcox_etas(model => $model);
    }

    if ($options{'etas'}) {
        $model->init_etas(phi_from_base => 1);
    }

	push( @{$models_array}, $model );
}

my $modelfit;

if ( defined $options{'predict_data'} and defined $options{'predict_model'} ) {
	if( scalar @{$models_array} > 1 ) {
		die( "When using predict_data and predict_model, no "
			 ."more than one model at a time may be run with execute" );
	}
	my $outfile = $options{'predict_model'};
	$outfile =~ s/\.mod//;
	$outfile = $outfile.'.lst';
	my $pred_mod = $models_array -> [0] -> copy( filename    => $options{'predict_model'},
												 copy_datafile   => 0,
												 copy_output => 0,
												 write_copy => 0);
	$pred_mod -> datafiles( new_names => [$options{'predict_data'}] );
	$pred_mod -> ignore_missing_files(1);
	$pred_mod -> outputfile( $outfile );
    $pred_mod -> set_outputfile();
	$pred_mod -> set_maxeval_zero();
	$pred_mod -> remove_records( type => 'covariance' );
	$pred_mod -> update_inits( from_model => $models_array -> [0] );
	my @new_tables;
	foreach my $file ( @{$pred_mod -> table_names -> [0]} ) {
		push( @new_tables, $options{'predict_model'}.'.'.$file );
	}
	$pred_mod -> table_names( new_names => [\@new_tables] );
	$pred_mod->_write();
	$modelfit = tool::modelfit -> 
		new ( eval( $common_options::parameters ),
			  prepend_options_to_lst => $options{'prepend_options_to_lst'},
			  tail_output => $options{'tail_output'},
			  wintail_exe => $options{'wintail_exe'},
			  wintail_command => $options{'wintail_command'},
			  models => [$pred_mod] );  
} else {

	$modelfit = tool::modelfit -> 
		new ( eval( $common_options::parameters ),
			  prepend_options_to_lst => $options{'prepend_options_to_lst'},
			  reduced_model_ofv => $options{'reduced_model_ofv'},
			  tail_output => $options{'tail_output'},
			  wintail_exe => $options{'wintail_exe'},
			  wintail_command => $options{'wintail_command'},
			  models => $models_array,
			  copy_data => $options{'copy_data'} );  
}


$modelfit-> print_options (cmd_line => $cmd_line,
						   toolname => 'execute',
						   local_options => [keys %optional_options],
						   common_options => \@common_options::tool_options);


$modelfit -> run;

if (scalar(@{$models_array})==1){
	#for rplots
	$modelfit -> print_results();
}

ui -> print( category => 'execute',
			 message => "\nexecute done",
			 newline => 1);
