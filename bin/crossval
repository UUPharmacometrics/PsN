#!/usr/bin/perl 

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use ui;
use Getopt::Long;
use common_options;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

## Declare the options
my %options;

my %required_options = ( "groups:i"=> undef );
my %optional_options = ( "msf!" => undef);

my $res = GetOptions( \%options, 
		      @common_options::get_opt_strings,
		      keys(%required_options),
		      keys(%optional_options) );

exit unless $res;

my %help_text;
$help_text{Pre_help_message} = <<'EOF';
	Cross-validation
EOF

$help_text{Description} = <<'EOF';

	The crossval tools divides the NONMEM data set into 'groups' equally sized
	parts. For each part i, the remaining groups-1 parts are used for estimation,
	and then part i is used for prediction.
	The output is the file xv_result.txt with prediction model OFVs and
	corresponding estimation model OFVs.
EOF

$help_text{Examples} = <<'EOF';    
	crossval run1.mod -groups=5
EOF

$help_text{Options} = <<'EOF';
	A model file is required as argument, and the -groups option is also required.

    The following options are valid:
EOF

$help_text{-h} = <<'EOF';
-h | -?

	With -h or -? crossval will print a list of options and exit.
EOF

$help_text{-help} = <<'EOF';
	-help

	With -help crossval will print this, longer, help message.
EOF

$help_text{-groups} = <<'EOF';
	-groups=N

The number of cross-validation groups in the data set.
EOF
$help_text{-msf} = <<'EOF';
	-msf

	Default not set, which means prediction model THETA/OMEGA/SIGMA are updated 
	with final estimates from estimation models. If -msf is set, instead use
	MSFO - MSFI to transfer parameter values from estimation models to
	prediction models.
EOF

common_options::online_help( 'crossval', \%options, \%help_text, \%required_options, \%optional_options);

common_options::setup( \%options, 'crossval' ); #calls set_globals etc, initiates random sequence

## Check that we do have a model file
if ( scalar(@ARGV) < 1 ) {
  print "A model file must be specified.\n";
  exit;
}

unless ( defined $options{'groups'} ){
    print "groups must be given\n" ;
    exit;
}

if ($options{'groups'} < 2) {
    print "the number of groups must be at least 2\n";
    exit;
}

require model;
require tool::xv;

my $eval_string = common_options::model_parameters(\%options);

my $model = model -> new ( eval( $eval_string ),
			   filename                    => $ARGV[0],
			   ignore_missing_output_files => 1 );

my $is_nonparametric = 0;
if (defined $model->problems->[0]->nonparametrics() and scalar(@{$model->problems->[0]->nonparametrics})> 0) {
	$is_nonparametric= 1;
}

my @models = ($model);
if( scalar(@ARGV) > 1 ){
	for (my $j=1; $j<scalar(@ARGV); $j++){
		push(@models,model -> new ( eval( $eval_string ),
									filename                    => $ARGV[$j],
									ignore_missing_output_files => 1 ));
	}
}


my $xv =  tool::xv_step -> new( eval( $common_options::parameters ),
								nr_validation_groups => $options{'groups'},
								directory_name_prefix => 'crossval',
								top_tool => 1,
								is_lasso => 0,
								is_nonparametric => $is_nonparametric,
								msf => $options{'msf'},
								models => \@models,
								subtool_arguments => { modelfit => { eval( $common_options::parameters ),
																	 directory => undef} },
    );
$xv-> print_options (cmd_line => $cmd_line,
					 toolname => 'crossval',
					 local_options => [keys %optional_options],
					 common_options => \@common_options::tool_options);

$xv -> run;

$xv->print_xv_results();

ui -> print( category => 'all',
			 message => "crossval done\n" );
