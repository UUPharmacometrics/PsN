#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use common_options;
use Cwd;
use ui;
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

## Configure the command line parsing
Getopt::Long::config("auto_abbrev");

my %options;
## Declare the options

my %required_options = ();

#option etas is not implemented, bootstrap always done on all etas
my %optional_options = (
    'dvid:s' => undef,
    'dv:s' => undef,
    'idv:s' => undef,
    'occ:s' => undef,
    'groups:i' => undef,
    'covariates:s' => undef,
    'categorical:s' => undef,
    'parameters:s' => undef,
    'fo!' => undef,
    'lst_file:s' => undef,
    'nointer!' => undef,
    'nonlinear!' => undef,
    'skip:s' => undef,
    'only:s' => undef,
);

my $res = GetOptions( \%options,
    @common_options::get_opt_strings,
    keys(%required_options),
    keys(%optional_options) );
exit unless $res;



my %help_text;

$help_text{Pre_help_message} = <<'EOF';
	Quality assurance
EOF

$help_text{Description} = <<'EOF';
	Quality assurance
EOF

$help_text{Examples} = <<'EOF';
	improve run1.mod
EOF

$help_text{Options} = <<'EOF';
	A model file is required as argument, 

	The following options are valid:
EOF

$help_text{-h} = <<'EOF';
	-h | -?

	With -h or -? resmod will print a list of options and exit.
EOF

$help_text{-help} = <<'EOF';      
	-help

	With -help resmod will print this, longer, help message.
EOF

$help_text{-dvid} = <<'EOF';
	-dvid

	Name of the dvid column. DVID is default. Will only be used for the structural
	and residual model analysis.
EOF

$help_text{-occ} = <<'EOF';
	-occ

	Default is OCC.Name of the occasion column.
EOF

$help_text{-idv} = <<'EOF';
	-idv

	Default is to use TIME,PRED and TAD (if present). Name of the independent
	variable for the structural and residual model analysis. This option will
	change the name of TIME.
EOF

$help_text{-dv} = <<'EOF';
	-dv

	Default is CWRES. Name of the dependent variable for the structural and residual
	odel analysis.
EOF

$help_text{-groups} = <<'EOF';
	-groups

	Default is 10. Set the number of groups to use for the time varying models.
	Quantiles using this number will be calculated.
EOF

$help_text{-covariates} = <<'EOF';
	-covariates

	A comma-separated list of continuous covariates.
EOF

$help_text{-categorical} = <<'EOF';
	-categorical

	A comma-separated list of categorical covariates.
EOF

$help_text{-parameters} = <<'EOF';
	-parameters

	A comma-separated list of parameters.
EOF

$help_text{-fo} = <<'EOF';
	-fo

	Default is off. Set if the FO method should be used for all estimations
	of the linearized model.
EOF

$help_text{-lst_file} = <<'EOF';
	-lst_file

	Default is to use an lst-file with the same name as the model. Set a NONMEM
	output file to be used for initial estimates.
EOF

$help_text{-nointer} = <<'EOF';
	-nointer

	Default is off. Don't use interaction in the linearized model.
EOF

$help_text{-nonlinear} = <<'EOF';
	-nonlinear

	Default is off. Don't linearize the model and use the original non-linear
	model for all runs.
EOF

$help_text{-skip} = <<'EOF';
	-skip

	Skip one or more sections of the improve procedure. Takes a list of section
	names to skip. The sections are: scm, frem, cdd, simeval,transform and resmod.
	This option is intended for testing and development.
EOF

$help_text{-only} = <<'EOF';
	-only

	Only run one or more sections of the improve procedure. Takes a list of section
	names to run. The sections are: scm, frem, cdd, simeval, transform and resmod.
	This option is intended for testing and development.
EOF

common_options::online_help( 'improve', \%options, \%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'improve' ); #calls set_globals etc, initiates random sequence

## Check that we do have a model file
if (scalar(@ARGV) < 1) {
  print "A model file must be specified. Use 'improve -h' for help.\n";
  exit;
}

if (scalar(@ARGV) > 1) {
  print "improve can only handle one modelfile, you listed: ",
  join(',',@ARGV),". Use 'improve -h' for help.\n";die;
  exit;
}

if (not defined $options{'rplots'}) {
    $options{'rplots'} = 1;
}

ui->category('improve');
ui->silent(1) if ($options{'silent'});

require model;
require tool::improve;

my $eval_string = common_options::model_parameters(\%options);

my $model = model->new(
    eval($eval_string),
    filename => $ARGV[0],
    ignore_missing_output_files => 1,
    ignore_missing_data => 1,
);

my $improve = tool::improve->new(
    eval( $common_options::parameters ),
    models => [$model],
    dvid => $options{'dvid'},
    idv => $options{'idv'},
    dv => $options{'dv'},
	occ => $options{'occ'},
    groups => $options{'groups'},
    covariates => $options{'covariates'},
    categorical => $options{'categorical'},
    parameters => $options{'parameters'},
    cmd_line => $cmd_line,
    fo => $options{'fo'},
    lst_file => $options{'lst_file'},
    nointer => $options{'nointer'},
    nonlinear => $options{'nonlinear'},
    skip => [split /,/, $options{'skip'}],
    only => [split /,/, $options{'only'}],
);

$improve->print_options(
    cmd_line => $cmd_line,
    toolname => 'qa',
    local_options => [keys %optional_options],
    common_options => \@common_options::tool_options
);

$improve->run();
$improve->print_results();

ui->print(category => 'improve', message  => "Improve done.\n");
