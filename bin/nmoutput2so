#!/usr/bin/perl

use FindBin qw($RealBin);
use lib "$RealBin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

use PsN;
use strict;
use Getopt::Long;
use common_options;
use Config;
# More PsN dependencies included with require further down

$| = 1; # Make sure autoflush is on

my %options;

my %required_options = ();
my %optional_options = ( 
    'h|?'         => undef,
    'help'        => undef,
    'bootstrap_results:s' => undef,
    'vpc_results:s' => undef,
    'so_filename:s' => undef,
    'version' => undef,
    'use_tables!' => undef,
    'exclude_elements:s' => undef,
    'only_include_elements:s' => undef,
    'message:s' => undef,
    'error:s' => undef,
    'toolname:s' => undef,
    'max_replicates:i' => undef,
    'pretty!' => undef,
    'pharmml:s' => undef,
    'verbose!' => undef,
    'external_tables!' => undef,
    'so_version:s' => undef,
    'psn_connector!' => undef,
    'rundir:s' => undef,
    'extra_output:s' => undef,
    'compress!' => undef,
    'include_fixed_params!' => undef,
    'generate_pharmml!' => undef,
);


my $res = GetOptions(\%options, keys(%optional_options));
exit unless $res;

my %defaults;

$defaults{'use_tables'} = 1; 
$defaults{'toolname'} = 'NONMEM';
$defaults{'pretty'} = 0;
$defaults{'so_version'} = 0.3;

foreach my $opt (keys(%optional_options)) {
  $opt =~ s/[!:|].*//g; #get rid of :s |? :i etcetera
  unless (defined $options{$opt}) {
    $options{$opt} = $defaults{$opt};
  }
}

my %help_text;

	$help_text{Pre_help_message} = <<'EOF';
    Perl script for creation of a standard output xml file from the nonmem output. 
EOF

	$help_text{Post_help_message} = <<'EOF';
EOF

	$help_text{-h} = <<'EOF';
-h | -?

    With -h or -? the script prints the list of available options 
    and exit.
EOF

	$help_text{-help} = <<'EOF';
	-help

    With -help a longer help message will be printed.
EOF

	$help_text{Description} = <<'EOF';
    The nmoutput2so tool creates and populates a DDMoRe standard output [Terranova] xml 
	file given the output from one or more NONMEM runs. It is necessary that the format 
	of the model file and other files follow a set of requirements for this to work. 
	The Perl module XML::LibXML is required by nmoutput2so, but not PsN in general. 
	Make sure that it is installed before using nmoutput2so (If you are using ActivePerl 
	on Windows please read the section on installation below). See the PsN installation 
	guide for intructions.
EOF

	$help_text{Options} = <<'EOF';
    One or more NONMEM results files (.lst) and or -bootstrap_results and or -vpc_results 
	(see those options) is mandatory. One SOBlock will be created for each .lst file and 
	the bootstrap/vpc results will be added to the first SOBlock or in it own block if 
	no .lst files were specified. Wildcards will work (i.e. *.lst).

	The following options are valid:
EOF

	$help_text{Examples} = <<'EOF';
    nmoutput2so run1.lst run2.lst
    
    This will add the NONMEM output from run1.lst in an SOBlock called run1 and the output
	from run2.lst to an SOBlock called run2. All information that is possible to extract 
	and that is supported will be added to the generated SO file, which will be called 
	run1.SO.xml.

    nmoutput2so -bootstrap_results=bootstrap_results.csv
    -so_filename=res.SO.xml

    This will add the PsN bootstrap results to a lone SOBlock in the file called 
	res.SO.xml.
EOF

	$help_text{-bootstrap_results} = <<'EOF';
    -bootstrap_results=file

    A bootstrap_results file as output from PsN to add to the SO.
EOF

	$help_text{-compress} = <<'EOF';
    -compress

    Set to automatically gzip compress the output SO file.
EOF

	$help_text{-error} = <<'EOF';
    -error=string

    Specify a string to be added as an error message in the TaskInformation of the first 
	SOBlock.
EOF

	$help_text{-exclude_elements} = <<'EOF';
    -exclude_elements 

    A comma separated list of simple XPaths for elements to exclude.
	Example: 
	-exclude_elements=Estimation/PopulationEstimates
EOF

	$help_text{-external_tables} = <<'EOF';
    -external_tables

    Set option to create external table files for the simulation results.
EOF

	$help_text{-extra_output} = <<'EOF';
    -extra_output

    A comma separated list of tabulated model variables to add a separate 
	SimulatedProfiles element.
EOF

	$help_text{-generate_pharmml} = <<'EOF';
    -generate_pharmml

    Generate and connect a minimal companion PharmML to the SO. This can be used to 
	automatically extract for example the parameter variability levels.
EOF

	$help_text{-include_fixed_params} = <<'EOF';
    -include_fixed_params

    Set option to include estimates of all fixed parameters.
EOF

	$help_text{-max_replicates} = <<'EOF';
    -max_replicates=integer 

    Default is to add all replicates.
	Set a maximum number of simulation replicates to add.
    
EOF

	$help_text{-message} = <<'EOF';
    -message=string 

    Specify a string to be added as an information message in the TaskInformation 
	of the first SOBlock.
EOF

	$help_text{-only_include_elements} = <<'EOF';
    -only_include_elements 

    A comma separated list of XPaths relative to the SOBlock. 
	These elements will be the only ones used.
    
    Example: 
	-only_include_elements=Estimation/Predictions
EOF

	$help_text{-pharmml} = <<'EOF';
    -pharmml='string'

    Set a name of the pharmml file used to generate the SO in the PharmMLRef element.
EOF

	$help_text{-pretty} = <<'EOF';
    -pretty

    Default is to not add intentations and thus to generate as compact xml files as 
	possible. Set if SO should be output with indentations and newlines.
EOF

	$help_text{-psn_connector} = <<'EOF';
    -psn_connector

    Do not use! Only for internal use by the PsN connector.
EOF

	$help_text{-rundir} = <<'EOF';
    -rundir

    Use to point to a PsN run directory to automatically extract results from.
	The following PsN tools are not (yet) supported; bootstrap, sse, vpc, execute and nca. 
EOF

	$help_text{-so_filename} = <<'EOF';
    -so_filename=string

    Set a filename for the resulting SO xml file. If this is not set, the file stem of 
	the first .lst file will be used.
EOF

	$help_text{-so_version} = <<'EOF';
    -so_version

    Default is 0.3. Set the version of the SO file to create.
EOF

	$help_text{-toolname} = <<'EOF';
    -toolname=string 

    Default is NONMEM. The toolname to use for messages. 
EOF

	$help_text{-use_tables} = <<'EOF';
    -use_tables

    Default set. Will use table files (sdtab, patab and cotab) to populate the elements 
	of the SO that needs these. Use -no-use_tables to not use any table files.
EOF

	$help_text{-verbose} = <<'EOF';
    -verbose

    Set to print information, such as all errors and warnings, during conversion
    to stdout.
EOF

	$help_text{-vpc_results} = <<'EOF';
    -vpc_results=filename

    A vpc_results file as output from PsN to add to the SO.
EOF

common_options::online_help('nmoutput2so', \%options, \%help_text, \%required_options, \%optional_options);

require output;
require model;
require so;
require so::parsers::nmoutput;
require so::parsers::bootstrap;
require so::parsers::vpc;
require so::parsers::sse;
require so::parsers::nca;
require so::parsers::execute;
require so::parsers::psn;

if ($options{'psn_connector'}) {
    (my $files, my $sofilename, my $error, my $append_columns) = so::parsers::psn::_connector_get_files(directory => 'rundir', pharmml => $options{'pharmml'}); 
    @ARGV = @$files;
    $options{'so_filename'} = $sofilename;
    $options{'toolname'} = 'PsN';
    $options{'error'} = $error;
    $options{'rundir'} = 'rundir';
    $options{'extra_output'} = $append_columns;
}

if ($options{'version'}) {
    print "PsN version: $PsN::version\n";
    exit;
}

if (scalar(@ARGV) < 1 and not defined $options{'bootstrap_results'} and not defined $options{'vpc_results'} and not defined $options{'rundir'}) {
  print "No files specified. Either specify one or more .lst file or use -bootstrap_results, -vpc_results or -rundir. Use 'nmoutput2so -h' for help.\n";
  exit;
}

if (defined $options{'only_include_elements'} and defined $options{'exclude_elements'}) {
    die "Can not use both -only_include_elements and -exclude_elements at the same time";
}

my $only_include_elements = common_options::get_option_array($options{'only_include_elements'});
my $exclude_elements = common_options::get_option_array($options{'exclude_elements'});

# Do globbing for windows wildcards
my @files;
if ($Config{osname} eq 'MSWin32') {
    foreach my $arg (@ARGV) {
        my @globfiles = glob($arg);
        push @files, @globfiles;
    }
} else {
    @files = @ARGV;
}

my $extra_output_columns;
if (defined $options{'extra_output'}) {
   $extra_output_columns = [ split /,/, $options{'extra_output'} ];
}

my $so = so->new(
    filename => $options{'so_filename'},
    pretty => $options{'pretty'},
    PharmMLRef => $options{'pharmml'},
    only_include_elements => $only_include_elements,
    exclude_elements => $exclude_elements,
    version => $options{'so_version'},
    message => $options{'message'},
    error => $options{'error'},
);

my $first_labels_hash;

foreach my $lst_file (@files) {
    my $nm_parser = so::parsers::nmoutput->new(
        so => $so,
        lst_file => $lst_file,
        toolname => $options{'toolname'},
        verbose => $options{'verbose'},
        max_replicates => $options{'max_replicates'},
        external_tables => $options{'external_tables'},
        extra_output => $extra_output_columns,
        include_fixed_params => $options{'include_fixed_params'},
        pharmml => $options{'generate_pharmml'},
    );
    $first_labels_hash = $nm_parser->labels_hash if not defined $first_labels_hash;
}

if (defined $options{'bootstrap_results'}) {
    my $bootparse = so::parsers::bootstrap->new(
        so => $so,
        bootstrap_results => $options{'bootstrap_results'},
        verbose => $options{'verbose'},
        labels_hash => $first_labels_hash,
    );
}

if (defined $options{'vpc_results'}) {
    my $bootparse = so::parsers::vpc->new(
        so => $so,
        vpc_results => $options{'vpc_results'},
    );
}

if (defined $options{'rundir'}) {
    my $toolname = so::parsers::psn::_get_toolname(directory => $options{'rundir'});
    unless ($toolname eq "bootstrap" or $toolname eq "sse" or $toolname eq "vpc" or $toolname eq "execute" or $toolname eq "nca") {
        die "Option rundir gives a directory for a tool that is not (yet) supported\n";
    }

    my $classname = "so::parsers::$toolname";
    my $parser = $classname->new(
        so => $so,
        rundir => $options{'rundir'},
        verbose => $options{'verbose'},
        labels_hash => $first_labels_hash,
    );
}

$so->write(compress => $options{'compress'});

#my $so = so->new(
#    use_tables => $options{'use_tables'},
#);
