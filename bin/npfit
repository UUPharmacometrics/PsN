#!/usr/bin/perl

# Only for Development
use FindBin qw($Bin);
use lib "$Bin/../lib";

# Don't edit the line below, it must look exactly like this.
# Everything above this line will be replaced #

# Perl includes #
use Config;
use strict;
use Getopt::Long;
# External modules #
use Math::Random;
# PsN includes #
use PsN;
use common_options;
use ui;
use Cwd;
use File::Copy qw/cp mv/;
use File::Glob;
use File::Path 'rmtree';
# More PsN dependencies included with require further down

my $cmd_line = $0 . " " . join( " ", @ARGV );

my %options;

my %required_options = ('npsupp:s' => undef);
my %optional_options = ();

my $res = GetOptions( \%options,
		      @common_options::get_opt_strings,
			  keys(%required_options),
		      keys(%optional_options) );

exit unless $res;

my %help_text;

$help_text{Pre_help_message} = <<'EOF';

	Run multiple copies of a single model, one for each value i of npsupp, with
	$NONPARAMETRIC UNCONDITIONAL NPSUPP=i
EOF

$help_text{Description} = <<'EOF';
	Running a modelfile with $NONPARAMETRIC UNCONDITIONAL and different values
	of NPSUPP.
EOF

$help_text{Options} = <<'EOF';

	A model file is required, as well as a list of npsupp values. NONMEM requires 
	that the $ESTIMATION record is present with the conditional method or POSTHOC:


	The following options are valid:
EOF

$help_text{Examples} = <<'EOF';
	npfit run1.mod -npsupp=50,100,200
EOF

$help_text{-npsupp} = <<'EOF';
	-npsupp

	A comma-separated list of non-negative integers. For each value N a new copy
	of the input model will be run with $NONPARAMETRIC UNCONDITIONAL NPSUPP=N.
	See the NONMEM documentation on $NONPARAMETRIC for interpretation of NPSUPP.
	All values in the list should be equal to or greater than the number of
	individuals in the data set.
EOF



common_options::online_help('npfit', \%options,\%help_text, \%required_options, \%optional_options);
common_options::setup( \%options, 'npfit' ); #calls set_globals etc, initiates random sequence

require tool::modelfit;
require model;
require input_checking;
require tool::nonparametric;


my $eval_string = common_options::model_parameters(\%options);

if( scalar(@ARGV) > 1 ) {
  die "When using npfit, no "
      ."more than one model at a time may be run\n";
}

if( scalar(@ARGV) == 0 ) {
  die "Model name is not given. Use 'npfit -h' for help.\n";
}

my $input_model;
$input_model = model -> new ( eval( $eval_string ),
							  filename => $ARGV[0],
							  ignore_missing_output_files => 1 );
							  
input_checking::check_options(tool => 'npfit', options => \%options, model => $input_model);							  

 
if( $options{'nonparametric_etas'} or
    $options{'nonparametric_marginals'} ) {
  $input_model -> add_nonparametric_code;
}
  
if( $options{'shrinkage'} ) {
  $input_model -> shrinkage_stats( enabled => 1 );
}
  
my $npfit = 
	tool::nonparametric->new( eval( $common_options::parameters ),
		directory_name_prefix => 'npfit',
		top_tool => 1,
		models => [$input_model],
		npsupp => $options{'npsupp'});
      

$npfit -> print_options (cmd_line => $cmd_line,
			   toolname => 'npfit',
			   local_options => [keys %optional_options],
			   common_options => \@common_options::tool_options);


$npfit -> run;

$npfit -> print_results; #for rplots. this creates r plots code, does zipping after

ui -> print( category => 'npfit',
	     message => "\nnpfit done\n" );
