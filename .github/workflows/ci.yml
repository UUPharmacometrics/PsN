name: ci
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Download source repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install build dependencies
        run: sudo apt install latexmk texlive-extra-utils texlive-latex-extra texlive-generic-extra biber texlive-bibtex-extra texlive-science texlive-font-utils and texlive-pictures tox
      - name: make
        run: make
      - name: make release
        run: make release
      - name: Upload installation artifact
        uses: actions/upload-artifact@v2
        with:
          name: targz
          path: PsN-*.tar.gz
      - name: Upload documentation artifact
        uses: actions/upload-artifact@v2
        with:
            name: docs
            path: doc/*.pdf

  get-nonmem:
    runs-on: ubuntu-latest
    steps:
      - name: Cache NONMEM
        id: cache-nonmem
        uses: actions/cache@v2
        with:
            path: 744.zip
            key: nonmem-744
      - name: Download NONMEM
        if: steps.cache-nonmem.outputs.cache-hit != 'true'
        run: |
          sudo apt install lynx
          echo 'key /' >>lynxcmds
          echo 'key 7' >>lynxcmds
          echo 'key 4' >>lynxcmds
          echo 'key 4' >>lynxcmds
          echo 'key ^J' >>lynxcmds
          echo 'key ^J' >>lynxcmds
          echo 'key /' >>lynxcmds
          echo 'key z' >>lynxcmds
          echo 'key i' >>lynxcmds
          echo 'key p' >>lynxcmds
          echo 'key ^J' >>lynxcmds
          echo 'key d' >>lynxcmds
          echo 'key ^J' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key <delete>' >>lynxcmds
          echo 'key 7' >>lynxcmds
          echo 'key 4' >>lynxcmds
          echo 'key 4' >>lynxcmds
          echo 'key .' >>lynxcmds
          echo 'key z' >>lynxcmds
          echo 'key i' >>lynxcmds
          echo 'key p' >>lynxcmds
          echo 'key ^J' >>lynxcmds
          echo 'key Q' >>lynxcmds
          lynx -accept-all-cookies nonmem.iconplc.com -cmd_script=lynxcmds
      - name: Upload cache workaround
        uses: actions/upload-artifact@v2
        with:
          name: cache-workaround
          path: 744.zip

  test-ubuntu:
    needs: [build, get-nonmem]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: targz
      - name: Cache NONMEM
        id: cache-nonmem
        uses: actions/cache@v2
        with:
            path: 744.zip
            key: nonmem-744
      - name: Unzip NONMEM
        run: unzip -P $ZIP_KEY 744.zip
        env:
          ZIP_KEY: ${{secrets.ZIP_KEY}}
      - name: Install gfortran
        run: sudo apt install gfortran
      - name: Install NONMEM
        run: |
          cd nm744CD
          /bin/bash SETUP74 $(realpath .) $(realpath ../nm744) gfortran y ar same rec q
      - name: NONMEM license
        run: echo $LICENSE_KEY >nm744/license/nonmem.lic
        env:
          LICENSE_KEY: ${{secrets.LICENSE_KEY}}
      - name: Extract PsN
        run: tar -zxvf PsN-*.tar.gz
      - name: Install Math::Random
        run: sudo cpan -T Math::Random
      - name: Install YAML::XS
        run: sudo cpan -T YAML::XS
      - name: Install Perl and R dependencies
        run: |
          sudo apt update
          sudo apt install -y libtest-exception-perl libmoose-perl libmoosex-params-validate-perl libarchive-zip-perl libfile-copy-recursive-perl r-base pandoc libpq-dev libcairo2-dev libssl-dev libcurl4-openssl-dev libmariadb-dev libgmp-dev libmpfr-dev libxml2-dev libudunits2-dev libblas-dev liblapack-dev libmagick++-dev
      - name: Install PsN
        run: cd PsN-Source; sudo perl setup.pl -auto
      - name: Update psn.conf
        run: |
          export LIBPATH=$(find /usr/local/share/perl/ -type d -name '5.*')
          export PSNPATH=$(find $LIBPATH -type d -name 'PsN_[0-9]*')
          export NMPATH=$(realpath nm744)
          sudo sed -i "/\\[nm_versions\\]/a default=$NMPATH,7.4.4" $PSNPATH/psn.conf
      - name: Run unit tests
        run: |
          export LIBPATH=$(find /usr/local/share/perl/ -type d -name '5.*')
          export TESTPATH=$(find $LIBPATH -type d -name 'PsN_test_[0-9]*')
          cd $TESTPATH
          prove -r -j8 unit
      - name: Run system tests
        run: |
          export LIBPATH=$(find /usr/local/share/perl/ -type d -name '5.*')
          export TESTPATH=$(find $LIBPATH -type d -name 'PsN_test_[0-9]*')
          cd $TESTPATH
          prove -r -j8 system
      - name: Upload failed system test directories artifact
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
            name: system-tests-ubuntu
            path: /tmp/PsN-test_system*

  test-macos:
    needs: [build, get-nonmem]
    runs-on: macos-latest
    steps:
      - name: Download installation tarball
        uses: actions/download-artifact@v2
        with:
          name: targz
      - name: Unpack installation tarball
        run: tar -zxvf PsN-*.tar.gz
      - name: Install system dependencies
        run: brew install r pandoc cairo mariadb-connector-c openssl@1.1 coreutils gnu-sed
      - name: Setup gfortran
        run: |
          sudo ln -s /usr/local/bin/gfortran-9 /usr/local/bin/gfortran
          sudo mkdir /usr/local/gfortran
          sudo ln -s /usr/local/Cellar/gcc@9/9.3.0_1/lib/gcc/9 /usr/local/gfortran/lib
      - name: Get NONMEM
        id: cache-nonmem
        uses: actions/cache@v2
        with:
            path: 744.zip
            key: nonmem-744
      - name: Unzip NONMEM
        run: unzip -P $ZIP_KEY 744.zip
        env:
          ZIP_KEY: ${{secrets.ZIP_KEY}}
      - name: Install NONMEM
        run: |
          cd nm744CD
          /bin/bash SETUP74 $(realpath .) $(realpath ../nm744) gfortran y ar same rec q
      - name: NONMEM license
        run: echo $LICENSE_KEY >nm744/license/nonmem.lic
        env:
          LICENSE_KEY: ${{secrets.LICENSE_KEY}}
      - name: Install Math::Random
        run: sudo cpan -T Math::Random
      - name: Install Moose
        run: sudo cpan -T Moose
      - name: Install MooseX::Params::Validate
        run: sudo cpan -T MooseX::Params::Validate
      - name: Install Archive::Zip
        run: sudo cpan -T Archive::Zip
      - name: Install File::Copy::Recursive
        run: sudo cpan -T File::Copy::Recursive
      - name: Install YAML::XS
        run: sudo cpan -T YAML::XS
      - name: Install Test::Exception
        run: sudo cpan -T Test::Exception
      - name: Install PsN
        run: cd PsN-Source; perl setup.pl -auto
      - name: Update psn.conf
        run: |
          export PSNPATH=$(find /usr/local/Cellar/perl/5.32.1/lib/perl5/site_perl/5.32.1/ -type d -name 'PsN_[0-9]*')
          export NMPATH=$(realpath nm744)
          sudo gsed -i "/\\[nm_versions\\]/a default=$NMPATH,7.4.4" $PSNPATH/psn.conf
      - name: Run unit tests
        run: |
          export TESTPATH=$(find /usr/local/Cellar/perl/5.32.1/lib/perl5/site_perl/5.32.1/ -type d -name 'PsN_test_[0-9]*')
          cd $TESTPATH
          prove -r -j8 unit
      - name: Save TMPDIR
        run: echo "TEMPDIR=$TMPDIR" >> $GITHUB_ENV
      - name: Run system tests
        run: |
          export TESTPATH=$(find /usr/local/Cellar/perl/5.32.1/lib/perl5/site_perl/5.32.1/ -type d -name 'PsN_test_[0-9]*')
          cd $TESTPATH
          prove -r -j8 system
      - name: Upload failed system test directories artifact
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
            name: system-tests-macos
            path: ${{ env.TEMPDIR }}/PsN-test_system*

  build-windows:
      needs: build
      runs-on: windows-latest
      steps:
        - name: Download installation tarball
          uses: actions/download-artifact@v2
          with:
            name: targz
        - name: Unpack installation tarball
          run: tar -zxvf PsN-*.tar.gz
          shell: bash
        - name: Download Strawberry Perl
          uses: suisei-cn/actions-download-file@v1
          with:
            url: http://strawberryperl.com/download/5.22.3.1/strawberry-perl-5.22.3.1-64bit-portable.zip
            target: downloads/
        - name: Download R
          uses: suisei-cn/actions-download-file@v1
          with:
            url: https://cran.r-project.org/bin/windows/base/old/4.0.3/R-4.0.3-win.exe
            target: downloads/
        - name: Download Python
          uses: suisei-cn/actions-download-file@v1
          with:
            url: https://github.com/winpython/winpython/releases/download/2.3.20200530/Winpython64-3.7.7.1dot.exe
            target: downloads/
        - name: Download Pandoc
          uses: suisei-cn/actions-download-file@v1
          with:
            url: https://github.com/jgm/pandoc/releases/download/2.5/pandoc-2.5-windows-i386.zip
            target: downloads/
        - name: Show downloads
          run: dir downloads
          shell: cmd
        - name: Create installation directory
          run: |
             md -Name installer
             md -Name installer\strawberry
        - name: Extract winpython
          run: |
            copy downloads\Winpython64-3.7.7.1dot.exe installer
            cd installer
            Winpython64-3.7.7.1dot.exe -y
            del Winpython64-3.7.7.1dot.exe
            rename WPy64-3771 python
          shell: cmd
        - name: Install Pharmpy dependencies
          run:
              installer\python\python-3.7.7.amd64\python.exe -m pip install -r PsN-Source\requirements.txt
          shell: cmd
        - name: Install Pharmpy
          run: installer\python\python-3.7.7.amd64\python.exe -m pip install --user --find-links=PsN-Source pharmpy-core
          shell: cmd
        - name: Extract Strawberry Perl
          run: tar -xf downloads/strawberry-perl-5.22.3.1-64bit-portable.zip -C installer\strawberry
        - name: Install perl modules
          run: |
            set PATH=%~dp0installer\strawberry\perl\site\bin;%~dp0installer\strawberry\perl\bin;%~dp0installer\strawberry\c\bin;%PATH%
            cpanm Params::Validate --notest
            cpanm MooseX::Params::Validate --notest
            cpanm Math::Random --notest
            cpanm Test::Exception --notest
          shell: cmd
        - name: Install PsN
          run: |
              set PATH=%CD%\installer\strawberry\perl\site\bin;%CD%\installer\strawberry\perl\bin;%CD%\installer\strawberry\c\bin;%PATH%
              cd PsN-Source
              perl setup.pl relative -auto
          shell: cmd
        - name: Extract pandoc
          run: tar -xf downloads/pandoc-2.5-windows-i386.zip -C installer
        - name: Install R
          run: downloads\R-4.0.3-win.exe /VERYSILENT /DIR="installer\R"
          shell: cmd
        - name: Install renv
          run: |
            md installer\Rlib
            installer\R\bin\x64\Rscript.exe -e "install.packages('renv', lib='installer/Rlib', repos='http://cran.us.r-project.org')"
          shell: cmd
        - name: Install R dependencies
          run: installer\R\bin\x64\Rscript.exe -e ".libPaths('installer/Rlib'); options(renv.config.copy.method='R'); options(renv.consent=TRUE); renv::settings$use.cache(FALSE); renv::restore(library='installer/Rlib', lockfile='PsN-Source/PsNR/renv.lock'); Sys.setenv(TZ='Europe/Berlin', LC_TIME='C', LC_MONETARY='C'); remotes::install_local('PsN-Source/PsNR', lib='installer/Rlib', repos=NULL, dependencies=F, INSTALL_opts=c('--no-multiarch'))"
          shell: cmd
        - name: Move dlls
          run: |
            mv installer/strawberry/c/bin/libxml2-2__.dll installer/strawberry/perl/bin/
            mv installer/strawberry/c/bin/liblzma-5__.dll installer/strawberry/perl/bin/
            mv installer/strawberry/c/bin/libiconv-2__.dll installer/strawberry/perl/bin/
            mv installer/strawberry/c/bin/zlib1__.dll installer/strawberry/perl/bin/
          shell: bash
        - name: Dir PsN
          run: dir installer\strawberry\perl\site\lib
          shell: cmd
        - name: Update psn.conf
          run: |
            export PSNPATH=$(find installer/strawberry/perl/site/lib/ -type d -name 'PsN_[0-9]*')
            echo PYTHON_PATH=../../../../../python/python-3.7.7.amd64 >tempfile
            echo R=../../../../../R/bin/R.exe >>tempfile
            echo R_LIB_PATH=../../../../../Rlib >>tempfile
            cat ${PSNPATH}/psn.conf >>tempfile
            mv tempfile ${PSNPATH}/psn.conf
          shell: bash
        - name: Clean R packages
          run: |
              echo 'import pathlib' >clean.py
              echo 'import shutil' >>clean.py
              echo 'rlib_path = pathlib.Path("installer") / "Rlib"' >>clean.py
              echo 'for package in rlib_path.iterdir():' >>clean.py
              echo '    subdirs = ["html", "help", "doc"]' >>clean.py
              echo '    for subdir in subdirs:' >>clean.py
              echo '        path = package / subdir' >>clean.py
              echo '        if path.exists():' >>clean.py
              echo '            shutil.rmtree(str(path))' >>clean.py
              installer/python/python-3.7.7.amd64/python.exe clean.py
          shell: bash
        - name: Remove unnecessary files
          run: |
              cd installer
              del pandoc\pandoc-citeproc.exe
              del "pandoc\Pandoc User's Guide.html"
              del R\unins000.dat
              del R\unins000.exe
              rmdir R\tests /s /q
              rmdir R\doc /s /q
              del strawberry\README.txt
              del strawberry\DISTRIBUTIONS.txt
              rmdir strawberry\win32 /s /q
              rmdir strawberry\data /s /q
              rmdir strawberry\cpan /s /q
              rmdir python\notebooks /s /q
              rmdir python\scripts /s /q
              rmdir python\python-3.7.7.amd64\tcl /s /q
              rmdir python\python-3.7.7.amd64\share /s /q
              rmdir python\python-3.7.7.amd64\Tools /s /q
              rmdir python\python-3.7.7.amd64\Doc /s /q
              del python\python-3.7.7.amd64\NEWS.txt
              rmdir python\python-3.7.7.amd64\libs /s /q
              rmdir python\python-3.7.7.amd64\include /s /q
          shell: cmd
        - name: Show installer directory
          run: dir installer
          shell: cmd
        - name: Create installation package
          run: |
            export filename=`ls PsN-*.tar.gz -1`
            export dirname="${filename%.tar.gz}"
            export packagename="${filename%.tar.gz}-windows-64bit.zip"
            mv installer $dirname
            7z a $packagename $dirname
            echo "packagename=${packagename}" >> $GITHUB_ENV
          shell: bash
        - name: Upload Windows package
          uses: actions/upload-artifact@v2
          with:
            name: win-installer
            path: ${{ env.packagename }}

  test-windows:
    needs: [build-windows, get-nonmem]
    runs-on: windows-latest
    steps:
      - name: Download installation tarball
        uses: actions/download-artifact@v2
        with:
            name: win-installer
      - name: Unzip installer
        run: 7z x *.zip
        shell: cmd
      - name: Get NONMEM
        uses: actions/download-artifact@v2
        with:
          name: cache-workaround
      - name: Unzip NONMEM
        run: 7z x 744.zip -p%ZIP_KEY%
        env:
          ZIP_KEY: ${{secrets.ZIP_KEY}}
        shell: cmd
      - name: NONMEM license
        run: echo $LICENSE_KEY >nm744CD/nonmem.lic
        env:
          LICENSE_KEY: ${{secrets.LICENSE_KEY}}
        shell: bash
      - name: Install NONMEM
        run: |
          set PATH=installer\strawberry\c\bin\;%PATH%
          set INSTALLDIR=%CD%\nm744
          cd nm744CD
          SETUP74.bat %CD% %INSTALLDIR% gfortran y ar same rec q
        shell: cmd
      - name: Update psn.conf
        run: |
          export PSNPATH=$(find . -type d -name 'PsN_[0-9]*')
          export NMPATH=$(realpath nm744)
          sed -i "/\\[nm_versions\\]/a default=$NMPATH,7.4.4" $PSNPATH/psn.conf
        shell: bash
      - name: Find tests
        run: |
          export PSNPATH=$(find . -maxdepth 1 -type d -name 'PsN-*')
          export TESTPATH=$(find $PSNPATH -type d -name 'PsN_test_[0-9]*')
          echo $PSNPATH
          echo $TESTPATH
          echo "PSNPATH=$PSNPATH" >> $GITHUB_ENV
          echo "TESTPATH=$TESTPATH" >> $GITHUB_ENV
        shell: bash
      - name: Run unit tests
        run: |
          set PATH=%PSNPATH%\strawberry\perl\bin;%PSNPATH%\strawberry\c\bin;%PATH%
          where prove
          cd %TESTPATH%
          prove -r -j8 unit
        shell: cmd
      - name: Save TEMP
        run: echo "TEMPDIR=%TEMP%" >> $GITHUB_ENV
        shell: cmd
      - name: Run system tests
        run: |
          set PATH=%PSNPATH%\strawberry\perl\bin;%PSNPATH%\strawberry\c\bin;%PATH%
          cd %TESTPATH%
          prove -r -j8 system
        shell: cmd
      - name: Upload failed system test directories artifact
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
            name: system-tests-windows
            path: ${{ env.TEMPDIR }}/PsN-test_system*
